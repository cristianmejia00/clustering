V(g_cluster)$name <- unique(clusters)
# Remove self-loops (connections within the same cluster)
g_cluster <- simplify(g_cluster, remove.multiple = FALSE, remove.loops = TRUE)
return(g_cluster)
}
# Assuming g1 is your network with the "cluster" attribute
cluster_network <- create_cluster_network(g1, "cluster")
# Function to create a network of clusters using contract()
create_cluster_network <- function(g, cluster_attr = "cluster") {
# Create a mapping vector where each vertex is assigned its cluster number
clusters <- vertex_attr(g, cluster_attr)
# Contract the graph based on this mapping
# This merges vertices with the same cluster value
g_cluster <- contract(g,
mapping = clusters,
vertex.attr.comb = list(name = "first", "ignore"))
# Set the vertex names to be the cluster names
V(g_cluster)$name <- unique(clusters)
# Remove self-loops (connections within the same cluster)
g_cluster <- simplify(g_cluster,
remove.multiple = FALSE,
edge.attr.comb = list(weight = "sum", "ignore")
remove.loops = TRUE)
# Assuming g1 is your network with the "cluster" attribute
cluster_network <- create_cluster_network(g1, "cluster")
# Function to create a network of clusters using contract()
create_cluster_network <- function(g, cluster_attr = "cluster") {
# Create a mapping vector where each vertex is assigned its cluster number
clusters <- vertex_attr(g, cluster_attr)
# Contract the graph based on this mapping
# This merges vertices with the same cluster value
g_cluster <- contract(g,
mapping = clusters,
vertex.attr.comb = list(name = "first", "ignore"))
# Set the vertex names to be the cluster names
V(g_cluster)$name <- unique(clusters)
# Remove self-loops (connections within the same cluster)
g_cluster <- simplify(g_cluster,
remove.multiple = TRUE,
edge.attr.comb = list(weight = "sum", "ignore")
remove.loops = TRUE)
# Assuming g1 is your network with the "cluster" attribute
cluster_network <- create_cluster_network(g1, "cluster")
# Function to create a network of clusters using contract()
create_cluster_network <- function(g, cluster_attr = "cluster") {
# Create a mapping vector where each vertex is assigned its cluster number
clusters <- vertex_attr(g, cluster_attr)
# Contract the graph based on this mapping
# This merges vertices with the same cluster value
g_cluster <- contract(g,
mapping = clusters,
vertex.attr.comb = list(name = "first", "ignore"))
# Set the vertex names to be the cluster names
V(g_cluster)$name <- unique(clusters)
# Remove self-loops (connections within the same cluster)
g_cluster <- simplify(g_cluster,
remove.multiple = TRUE,
edge.attr.comb = list(weight = "sum", "ignore")
remove.loops = TRUE)
# Assuming g1 is your network with the "cluster" attribute
cluster_network <- create_cluster_network(g1, "cluster")
create_cluster_network
# Function to create a network of clusters using contract()
create_cluster_network <- function(g, cluster_attr = "cluster") {
# Create a mapping vector where each vertex is assigned its cluster number
clusters <- vertex_attr(g, cluster_attr)
# Contract the graph based on this mapping
# This merges vertices with the same cluster value
g_cluster <- contract(g,
mapping = clusters,
vertex.attr.comb = list(name = "first", "ignore"))
# Set the vertex names to be the cluster names
V(g_cluster)$name <- unique(clusters)
# Remove self-loops (connections within the same cluster)
g_cluster <- simplify(g_cluster,
remove.multiple = TRUE,
edge.attr.comb = list(weight = "sum", "ignore")
remove.loops = TRUE)
# Function to create a network of clusters using contract()
create_cluster_network <- function(g, cluster_attr = "cluster") {
# Create a mapping vector where each vertex is assigned its cluster number
clusters <- vertex_attr(g, cluster_attr)
# Contract the graph based on this mapping
# This merges vertices with the same cluster value
g_cluster <- contract(g,
mapping = clusters,
vertex.attr.comb = list(name = "first", "ignore"))
# Set the vertex names to be the cluster names
V(g_cluster)$name <- unique(clusters)
# Remove self-loops (connections within the same cluster)
g_cluster <- simplify(g_cluster,
remove.multiple = TRUE,
edge.attr.comb = list(weight = "sum", "ignore"),
remove.loops = TRUE)
return(g_cluster)
}
create_cluster_network
# Assuming g1 is your network with the "cluster" attribute
cluster_network <- create_cluster_network(g1, "cluster")
# Visualize the cluster network with edge weights
plot(cluster_network,
edge.width = E(cluster_network)$weight/2,  # Scale weights for better visualization
vertex.size = 30,
vertex.label.cex = 1.2,
edge.label = E(cluster_network)$weight)
##############################
# Layout
coords <- layout_with_kk(g1)
##############################
# Layout
coords <- layout_with_kk(cluster_network)
coords
##############################
# Layout
coords <- layout_with_kk(cluster_network)
V(cluster_network)$x <- coords[,1]
V(cluster_network)$y <- coords[,2]
coords_df <- as_data_frame(cluster_network, what = "vertices")
coords_df <- as_tibble(cluster_network, what = "vertices")
coords_df <- as.data.frame(cluster_network, what = "vertices")
coords_df <- as.data.frame(cluster_network)
coords_df <- as_data_frame(cluster_network)
coords_df <- igraph::as_data_frame(cluster_network)
coords_df <- igraph::as_data_frame(cluster_network, what = "vertices")
View(coords_df)
View(dataset)
#network <- read.csv("file.ncol", sep = " ", header = FALSE, stringsAsFactors = FALSE)
g1 <- graph_from_data_frame(network, directed = FALSE)
vcount(g1)
# List of clusters
id_com <- sort(unique(dataset$level0))
# Change last cluster, 99, to natural number
id_com[[length(id_com)]] <- length(id_com)
View(dataset)
# Create correspondence table for nodes and clusters
node_cluster <- myDataCorrect[,c("X_N", "level0", "subcluster_label1")]
setnames(node_cluster, c("level0", "subcluster_label1"), c("cluster", "subcluster"))
########################################################################
# Sort the graph vertices in same order as node_cluster
# There are differences in the count of nodes. After inspecting them I reached these conclusions:
# As long as the dataset has the lowest number seems to be no problem
# Need to check how I built the ncol_file. As I did not filter the network only for the nodes in the dataset. It has other nodes too.
nodes_database <- node_cluster$X_N
nodes_g1 <- names(V(g1)) %>% as.numeric()
g1 <- induced_subgraph(g1, which(nodes_g1 %in% nodes_database))
vcount(g1)
vv <- V(g1) %>% names %>% as.numeric #Order of nodes in the graph
idx <- match(vv, node_cluster$X_N) #Index to reorder graph
g1 <- permute(g1, idx)
# Verify the assignation is correct. It must be TRUE
all(as.numeric(names(V(g1))) == node_cluster$X_N)
# =================================
V(g1)$cluster <- as.character(node_cluster$cluster)
V(g1)$subcluster <- as.character(node_cluster$subcluster)
# =================================
# Function to create a network of clusters using contract()
create_cluster_network <- function(g, cluster_attr = "cluster") {
# Create a mapping vector where each vertex is assigned its cluster number
clusters <- vertex_attr(g, cluster_attr)
# Contract the graph based on this mapping
# This merges vertices with the same cluster value
g_cluster <- contract(g,
mapping = clusters,
vertex.attr.comb = list(name = "first", "ignore"))
# Set the vertex names to be the cluster names
V(g_cluster)$name <- unique(clusters)
# Remove self-loops (connections within the same cluster)
g_cluster <- simplify(g_cluster,
remove.multiple = TRUE,
edge.attr.comb = list(weight = "sum", "ignore"),
remove.loops = TRUE)
return(g_cluster)
}
# Assuming g1 is your network with the "cluster" attribute
cluster_network <- create_cluster_network(g1, "cluster")
subcluster_network <- create_cluster_network(g1, "subcluster")
########################################################################
# Sort the graph vertices in same order as node_cluster
# There are differences in the count of nodes. After inspecting them I reached these conclusions:
# As long as the dataset has the lowest number seems to be no problem
# Need to check how I built the ncol_file. As I did not filter the network only for the nodes in the dataset. It has other nodes too.
nodes_database <- node_cluster$X_N
nodes_g1 <- names(V(g1)) %>% as.numeric()
g1 <- induced_subgraph(g1, which(nodes_g1 %in% nodes_database))
vcount(g1)
vv <- V(g1) %>% names %>% as.numeric #Order of nodes in the graph
idx <- match(vv, node_cluster$X_N) #Index to reorder graph
g1 <- permute(g1, idx)
# Verify the assignation is correct. It must be TRUE
all(as.numeric(names(V(g1))) == node_cluster$X_N)
# =================================
# Add cluster and subcluster labels
V(g1)$cluster <- as.character(node_cluster$cluster)
V(g1)$subcluster <- as.character(node_cluster$subcluster)
# =================================
# Function to create a network of clusters using contract()
create_cluster_network <- function(g, cluster_attr = "cluster") {
# Create a mapping vector where each vertex is assigned its cluster number
clusters <- vertex_attr(g, cluster_attr)
# Contract the graph based on this mapping
# This merges vertices with the same cluster value
g_cluster <- contract(g,
mapping = clusters,
vertex.attr.comb = list(name = "first", "ignore"))
# Set the vertex names to be the cluster names
V(g_cluster)$name <- unique(clusters)
# Remove self-loops (connections within the same cluster)
g_cluster <- simplify(g_cluster,
remove.multiple = TRUE,
edge.attr.comb = list(weight = "sum", "ignore"),
remove.loops = TRUE)
return(g_cluster)
}
# Assuming g1 is your network with the "cluster" attribute
cluster_network <- create_cluster_network(g1, "cluster")
# =================================
# Function to create a network of clusters using contract()
create_cluster_network <- function(g, cluster_attr = "cluster") {
# Create a mapping vector where each vertex is assigned its cluster number
clusters <- vertex_attr(g, cluster_attr)
# Contract the graph based on this mapping
# This merges vertices with the same cluster value
g_cluster <- contract(g,
mapping = clusters,
vertex.attr.comb = list(name = "first", "ignore"))
# Set the vertex names to be the cluster names
#V(g_cluster)$name <- unique(clusters)
# Remove self-loops (connections within the same cluster)
g_cluster <- simplify(g_cluster,
remove.multiple = TRUE,
edge.attr.comb = list(weight = "sum", "ignore"),
remove.loops = TRUE)
return(g_cluster)
}
# Assuming g1 is your network with the "cluster" attribute
cluster_network <- create_cluster_network(g1, "cluster")
subcluster_network <- create_cluster_network(g1, "subcluster")
View(node_cluster)
subcluster_network <- create_cluster_network(g1, "subcluster")
##############################
# Layout
sub_coords <- layout_with_kk(subcluster_network)
V(subcluster_network)$x <- coords[,1]
V(subcluster_network)$y <- coords[,2]
coords_df <- igraph::as_data_frame(subcluster_network, what = "vertices")
View(coords_df)
# Assuming g1 is your network with the "cluster" attribute
cluster_network <- create_cluster_network(g1, cluster_attr = "cluster")
##############################
# Layout
coords <- layout_with_kk(cluster_network)
V(cluster_network)$x <- coords[,1]
V(cluster_network)$y <- coords[,2]
coords_df <- igraph::as_data_frame(subcluster_network, what = "vertices")
View(node_cluster)
# Assuming g1 is your network with the "cluster" attribute
cluster_network <- create_cluster_network(g1, cluster_attr = "cluster")
vcount(cluster_network)
table(V(g1)$subcluster)
table(V(g1))
table(V(g1)$cluster)
table(as.character(node_cluster$cluster))
# =================================
# Function to create a network of clusters using contract()
create_cluster_network <- function(g, cluster_attr = "cluster") {
# Create a mapping vector where each vertex is assigned its cluster number
clusters <- vertex_attr(g, cluster_attr)
# mapping
# Get unique cluster names
unique_clusters <- unique(cluster_names)
# Create a mapping from cluster names to numeric IDs
cluster_mapping <- match(cluster_names, unique_clusters)
# Contract the graph based on this mapping
# This merges vertices with the same cluster value
g_cluster <- contract(g,
mapping = cluster_mapping,
vertex.attr.comb = list(name = "first", "ignore"))
# Set the vertex names to be the cluster names
V(g_cluster)$name <- unique(clusters)
# Remove self-loops (connections within the same cluster)
g_cluster <- simplify(g_cluster,
remove.multiple = TRUE,
edge.attr.comb = list(weight = "sum", "ignore"),
remove.loops = TRUE)
return(g_cluster)
}
# Assuming g1 is your network with the "cluster" attribute
cluster_network <- create_cluster_network(g1, cluster_attr = "cluster")
# =================================
# Function to create a network of clusters using contract()
create_cluster_network <- function(g, cluster_attr = "cluster") {
# Create a mapping vector where each vertex is assigned its cluster number
cluster_names <- vertex_attr(g, cluster_attr)
# mapping
# Get unique cluster names
unique_clusters <- unique(cluster_names)
# Create a mapping from cluster names to numeric IDs
cluster_mapping <- match(cluster_names, unique_clusters)
# Contract the graph based on this mapping
# This merges vertices with the same cluster value
g_cluster <- contract(g,
mapping = cluster_mapping,
vertex.attr.comb = list(name = "first", "ignore"))
# Set the vertex names to be the cluster names
V(g_cluster)$name <- unique(clusters)
# Remove self-loops (connections within the same cluster)
g_cluster <- simplify(g_cluster,
remove.multiple = TRUE,
edge.attr.comb = list(weight = "sum", "ignore"),
remove.loops = TRUE)
return(g_cluster)
}
# Assuming g1 is your network with the "cluster" attribute
cluster_network <- create_cluster_network(g1, cluster_attr = "cluster")
vertex_attr(g, cluster_attr)
vertex_attr(g1, cluster_attr)
vertex_attr(g1, "cluster")
unique(vertex_attr(g1, "cluster"))
# =================================
# Function to create a network of clusters using contract()
create_cluster_network <- function(g, cluster_attr = "cluster") {
# Create a mapping vector where each vertex is assigned its cluster number
cluster_names <- vertex_attr(g, cluster_attr)
# mapping
# Get unique cluster names
unique_clusters <- unique(cluster_names)
# Create a mapping from cluster names to numeric IDs
cluster_mapping <- match(cluster_names, unique_clusters)
# Contract the graph based on this mapping
# This merges vertices with the same cluster value
g_cluster <- contract(g,
mapping = cluster_mapping,
vertex.attr.comb = list(name = "first", "ignore"))
# Set the vertex names to be the cluster names
V(g_cluster)$name <- unique(clusters)
# Remove self-loops (connections within the same cluster)
g_cluster <- simplify(g_cluster,
remove.multiple = TRUE,
edge.attr.comb = list(weight = "sum", "ignore"),
remove.loops = TRUE)
return(g_cluster)
}
# Assuming g1 is your network with the "cluster" attribute
cluster_network <- create_cluster_network(g1, cluster_attr = "cluster")
# =================================
# Function to create a network of clusters using contract()
create_cluster_network <- function(g, cluster_attr = "cluster") {
# Create a mapping vector where each vertex is assigned its cluster number
cluster_names <- vertex_attr(g, cluster_attr)
# mapping
# Get unique cluster names
unique_clusters <- unique(cluster_names)
# Create a mapping from cluster names to numeric IDs
cluster_mapping <- match(cluster_names, unique_clusters)
# Contract the graph based on this mapping
# This merges vertices with the same cluster value
g_cluster <- contract(g,
mapping = cluster_mapping,
vertex.attr.comb = list(name = "first", "ignore"))
# Set the vertex names to be the cluster names
V(g_cluster)$name <- unique(cluster_names)
# Remove self-loops (connections within the same cluster)
g_cluster <- simplify(g_cluster,
remove.multiple = TRUE,
edge.attr.comb = list(weight = "sum", "ignore"),
remove.loops = TRUE)
return(g_cluster)
}
# Assuming g1 is your network with the "cluster" attribute
cluster_network <- create_cluster_network(g1, cluster_attr = "cluster")
vcount(cluster_network)
subcluster_network <- create_cluster_network(g1, cluster_attr = "subcluster")
##############################
# Layout cluster
coords <- layout_with_kk(cluster_network)
V(cluster_network)$x <- coords[,1]
V(cluster_network)$y <- coords[,2]
##############################
# Layout subcluster
sub_coords <- layout_with_kk(subcluster_network)
V(subcluster_network)$x <- coords[,1]
##############################
# Layout subcluster
sub_coords <- layout_with_kk(subcluster_network)
V(subcluster_network)$x <- sub_coords[,1]
V(subcluster_network)$y <- sub_coords[,2]
# Save
coords_df <- igraph::as_data_frame(cluster_network, what = "vertices")
sub_coords_df <- igraph::as_data_frame(subcluster_network, what = "vertices")
View(sub_coords_df)
write.csv(sub_coords_df, file="subcoords_df.csv", row.names = FALSE)
library(readr)
df <- read_csv("~/Library/CloudStorage/GoogleDrive-cristianmejia00@gmail.com/My Drive/Bibliometrics_Drive/Q327 TI Policy/a01_cn__f01_dc__c01_lv/level1/cluster_summary_extended_dc.csv")
View(df)
df$main_cluster <- as.character(df$main_cluster)
# Create the scatter plot
ggplot(df,# %>% filter(main_cluster == "4"),
aes(x = x, y = y, color = main_cluster, size = documents, label = cluster_name)) +
geom_point(alpha = 0.7) +
geom_text(aes(label = cluster_name), vjust = -0.5, hjust = 0.5, size = 3) +
scale_size_continuous(range = c(2, 10)) +  # Adjust min and max size as needed
theme_minimal() +
labs(title = "Cluster Visualization",
x = "X Coordinate",
y = "Y Coordinate",
color = "Main Cluster",
size = "Number of Documents") +
theme(legend.position = "right")
########################################################################
# Load necessary libraries
library(plotly)
# Create the interactive scatter plot
plot <- plot_ly(
data = df,
x = ~x,
y = ~y,
color = ~main_cluster,
size = ~documents,
sizes = c(5, 50),  # Adjust min and max size as needed
text = ~cluster_name,
hoverinfo = "text",
type = "scatter",
mode = "markers+text",
textposition = "top center"
) %>%
layout(
title = "Cluster Visualization",
xaxis = list(title = "X Coordinate"),
yaxis = list(title = "Y Coordinate"),
legend = list(title = list(text = "Main Cluster"))
)
# Display the plot
plot
# Create the interactive scatter plot
plot <- plot_ly(
data = df,
x = ~x,
y = ~y,
color = ~main_cluster,
size = ~documents,
sizes = c(10, 100),  # Adjust min and max size as needed
text = ~cluster_name,
hoverinfo = "text",
type = "scatter",
mode = "markers",
textposition = "top center"
) %>%
layout(
title = "Cluster Visualization",
xaxis = list(title = "X Coordinate"),
yaxis = list(title = "Y Coordinate"),
legend = list(title = list(text = "Main Cluster"))
)
# Display the plot
plot
# Create the interactive scatter plot
plot <- plot_ly(
data = df,
x = ~x,
y = ~y,
color = ~main_cluster,
size = ~documents,
sizes = c(10, 200),  # Adjust min and max size as needed
text = ~cluster_name,
hoverinfo = "text",
type = "scatter",
mode = "markers",
textposition = "top center"
) %>%
layout(
title = "Cluster Visualization",
xaxis = list(title = "X Coordinate"),
yaxis = list(title = "Y Coordinate"),
legend = list(title = list(text = "Main Cluster"))
)
# Display the plot
plot
# Create the interactive scatter plot
plot <- plot_ly(
data = df,
x = ~x,
y = ~y,
color = ~main_cluster,
size = ~documents,
sizes = c(10, 300),  # Adjust min and max size as needed
text = ~cluster_name,
hoverinfo = "text",
type = "scatter",
mode = "markers",
textposition = "top center"
) %>%
layout(
title = "Cluster Visualization",
xaxis = list(title = "X Coordinate"),
yaxis = list(title = "Y Coordinate"),
legend = list(title = list(text = "Main Cluster"))
)
# Display the plot
plot
# Create the scatter plot
ggplot(df,# %>% filter(main_cluster == "4"),
aes(x = x, y = y, color = main_cluster, size = documents, label = cluster_name)) +
geom_point(alpha = 0.7) +
#geom_text(aes(label = cluster_name), vjust = -0.5, hjust = 0.5, size = 3) +
scale_size_continuous(range = c(2, 10)) +  # Adjust min and max size as needed
theme_minimal() +
labs(title = "Cluster Visualization",
x = "X Coordinate",
y = "Y Coordinate",
color = "Main Cluster",
size = "Number of Documents") +
theme(legend.position = "right")
