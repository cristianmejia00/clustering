rownames(heatmap) <- colnames(heatmap)
heatmap_pairs <- matrix_to_sorted_df(heatmap)
heatmap_pairs$cluster_a <- substr(heatmap_pairs$cluster_a, 1, 7)
heatmap_pairs$cluster_b <- substr(heatmap_pairs$cluster_b, 1, 7)
tttt <- substr(tmp$Name, 1, 7)
heatmap_pairs_selected <- heatmap_pairs
heatmap_pairs_selected$cluster_a_label <- tmp$Name2[match(heatmap_pairs_selected$cluster_a, tttt)]
heatmap_pairs_selected$cluster_b_label <- tmp$Name2[match(heatmap_pairs_selected$cluster_b, tttt)]
heatmap_pairs_selected$cluster_a_code <- tmp$cluster_code[match(heatmap_pairs_selected$cluster_a, tttt)]
heatmap_pairs_selected$cluster_b_code <- tmp$cluster_code[match(heatmap_pairs_selected$cluster_b, tttt)]
heatmap_pairs_selected$cross_institution <- (grepl('PIK', heatmap_pairs_selected$cluster_a_code) & grepl('RIKEN', heatmap_pairs_selected$cluster_b_code)) | ( grepl('RIKEN', heatmap_pairs_selected$cluster_a_code) & grepl('PIK', heatmap_pairs_selected$cluster_b_code))
heatmap_pairs_selected <- heatmap_pairs_selected %>%
select(-cluster_a, -cluster_b) %>%
mutate(rank = dense_rank(desc(similarity))) %>%
relocate(rank)
write.csv(heatmap_pairs_selected, file = 'heatmap_pairs.csv', row.names = FALSE)
View(heatmap_pairs_selected)
View(heatmap_pairs_selected)
heatmap <- readr::read_csv("~/Library/CloudStorage/GoogleDrive-cristianmejia00@gmail.com/My Drive/PIK-RIKEN/heatmap_updated2.csv")
heatmap <- as.matrix(heatmap)
rownames(heatmap) <- colnames(heatmap)
heatmap_pairs <- matrix_to_sorted_df(heatmap)
heatmap_pairs$cluster_a <- substr(heatmap_pairs$cluster_a, 1, 7)
heatmap_pairs$cluster_b <- substr(heatmap_pairs$cluster_b, 1, 7)
View(heatmap_pairs)
tttt <- substr(tmp$Name, 1, 7)
heatmap_pairs_selected <- heatmap_pairs
heatmap_pairs_selected$cluster_a_label <- tmp$Name2[match(heatmap_pairs_selected$cluster_a, tttt)]
heatmap_pairs_selected$cluster_b_label <- tmp$Name2[match(heatmap_pairs_selected$cluster_b, tttt)]
heatmap_pairs_selected$cluster_a_code <- tmp$cluster_code[match(heatmap_pairs_selected$cluster_a, tttt)]
heatmap_pairs_selected$cluster_b_code <- tmp$cluster_code[match(heatmap_pairs_selected$cluster_b, tttt)]
View(heatmap_pairs_selected)
View(dataset_plant)
heatmap_pairs_selected$cluster_a_inst <- sapply(heatmap_pairs_selected$cluster_a_code, \(x) {
strsplit(x, '-')[[1]]
})
heatmap_pairs_selected$cluster_a_inst <- sapply(heatmap_pairs_selected$cluster_a_code, \(x) {
strsplit(x, '-')[[1]][1]
})
View(heatmap_pairs_selected)
heatmap_pairs_selected$cluster_b_inst <- sapply(heatmap_pairs_selected$cluster_b_code, \(x) {
strsplit(x, '-')[[1]][1]
})
View(heatmap_pairs_selected)
heatmap_pairs_selected$cross_institution <- heatmap_pairs_selected$cluster_a_inst == heatmap_pairs_selected$cluster_b_inst
View(heatmap_pairs_selected)
heatmap_pairs_selected$cross_institution <- heatmap_pairs_selected$cluster_a_inst != heatmap_pairs_selected$cluster_b_inst
View(heatmap_pairs_selected)
heatmap_pairs_selected <- heatmap_pairs_selected %>%
select(-cluster_a, -cluster_b) %>%
mutate(rank = dense_rank(desc(similarity))) %>%
relocate(rank)
View(heatmap_pairs_selected)
heatmap_pairs_selected <- heatmap_pairs_selected %>%
filter(cross_institution) %>%
filter(similarity > 0.8) %>%
rename(
Source = cluster_a_code,
Target = cluster_b_code,
Weight = similarity
)
View(heatmap_pairs_selected)
write.csv(heatmap_pairs_selected, file = 'heatmap_pairs.csv', row.names = FALSE)
################## Save the cluster summary and the dataset
# Write RCS for report purpose
write.csv(tmp %>%
select(cluster_code, Name2, Count, ave_Z9, ave_PY,
Representation, Representative_Docs,
x, y, color,
institution, idx, label, group1) %>%
rename(
'Name' = Name2,
'Groups' = group1,
'Id' = cluster_code
),
file='rcs_final_pik_riken.csv',
row.names = FALSE)
View(heatmap_pairs_selected)
heatmap_pairs_selected$cluster_a_inst <- sapply(heatmap_pairs_selected$cluster_a_code, \(x) {
strsplit(x, '-|.')[[1]][1]
})
heatmap_pairs_selected <- heatmap_pairs
heatmap_pairs_selected$cluster_a_label <- tmp$Name2[match(heatmap_pairs_selected$cluster_a, tttt)]
heatmap_pairs_selected$cluster_b_label <- tmp$Name2[match(heatmap_pairs_selected$cluster_b, tttt)]
heatmap_pairs_selected$cluster_a_code <- tmp$cluster_code[match(heatmap_pairs_selected$cluster_a, tttt)]
heatmap_pairs_selected$cluster_b_code <- tmp$cluster_code[match(heatmap_pairs_selected$cluster_b, tttt)]
heatmap_pairs_selected$cluster_a_inst <- sapply(heatmap_pairs_selected$cluster_a_code, \(x) {
strsplit(x, '-|.')[[1]][1]
})
heatmap_pairs_selected$cluster_b_inst <- sapply(heatmap_pairs_selected$cluster_b_code, \(x) {
strsplit(x, '-|.')[[1]][1]
})
heatmap_pairs_selected$cross_institution <- heatmap_pairs_selected$cluster_a_inst != heatmap_pairs_selected$cluster_b_inst
View(heatmap_pairs_selected)
heatmap_pairs_selected <- heatmap_pairs
heatmap_pairs_selected$cluster_a_label <- tmp$Name2[match(heatmap_pairs_selected$cluster_a, tttt)]
heatmap_pairs_selected$cluster_b_label <- tmp$Name2[match(heatmap_pairs_selected$cluster_b, tttt)]
heatmap_pairs_selected$cluster_a_code <- tmp$cluster_code[match(heatmap_pairs_selected$cluster_a, tttt)]
heatmap_pairs_selected$cluster_b_code <- tmp$cluster_code[match(heatmap_pairs_selected$cluster_b, tttt)]
heatmap_pairs_selected$cluster_a_inst <- sapply(heatmap_pairs_selected$cluster_a_code, \(x) {
strsplit(x, '-|\\.')[[1]][1]
})
heatmap_pairs_selected$cluster_b_inst <- sapply(heatmap_pairs_selected$cluster_b_code, \(x) {
strsplit(x, '-|\\.')[[1]][1]
})
View(heatmap_pairs_selected)
heatmap_pairs_selected$cross_institution <- heatmap_pairs_selected$cluster_a_inst != heatmap_pairs_selected$cluster_b_inst
heatmap_pairs_selected <- heatmap_pairs_selected %>%
select(-cluster_a, -cluster_b) %>%
mutate(rank = dense_rank(desc(similarity))) %>%
relocate(rank)
heatmap_pairs_selected <- heatmap_pairs_selected %>%
filter(cross_institution) %>%
filter(similarity > 0.8) %>%
rename(
Source = cluster_a_code,
Target = cluster_b_code,
Weight = similarity
)
View(heatmap_pairs_selected)
heatmap_pairs_selected$path <- sapply(c(1:length(heatmap_pairs_selected)), \(x) {
tmp <- sort(c(heatmap_pairs_selected$Source[x], heatmap_pairs_selected$Target[x]))
paste(tmp, sep = '::')
})
heatmap_pairs_selected$path <- sapply(c(1:length(heatmap_pairs_selected)), \(x) {
tmp <- sort(c(heatmap_pairs_selected$Source[x], heatmap_pairs_selected$Target[x]))
return(paste(tmp, collapse = '::'))
})
heatmap_pairs_selected$path <- sapply(c(1:nrow(heatmap_pairs_selected)), \(x) {
tmp <- sort(c(heatmap_pairs_selected$Source[x], heatmap_pairs_selected$Target[x]))
print(tmp)
return(paste(tmp, collapse = '::'))
})
View(heatmap_pairs_selected)
ht_pik <- heatmap_pairs_selected %>% filter(grepl('PIK', path))
ht_riken <- heatmap_pairs_selected %>% filter(grepl('RIKEN', path))
unique(heatmap_pairs_selected$Source, heatmap_pairs_selected$Target) %>% sort()
unique(c(heatmap_pairs_selected$Source, heatmap_pairs_selected$Target)) %>% sort()
c(heatmap_pairs_selected$Source, heatmap_pairs_selected$Target) %>% unique() %>% sort() %>% .[grepl('Plant',.)]
plant_clusters <- c(heatmap_pairs_selected$Source, heatmap_pairs_selected$Target) %>% unique() %>% sort() %>% .[grepl('Plant',.)]
path_df <- data.frame('Plant' = plant_clusters)
View(path_df)
View(ht_pik)
path_df <- data.frame('Plant' = plant_clusters)
path_df <- merge(path_df,
ht_pik %>% select(Source, Target),
by.x = 'Plant',
by.y = 'Source',
all.x = TRUE,
all.y = FALSE)
path_df <- merge(path_df,
ht_pik %>% select(Source, Target),
by.x = 'Plant',
by.y = 'Target',
all.x = TRUE,
all.y = FALSE)
View(path_df)
View(path_df)
path_df <- data.frame('Plant' = plant_clusters)
path_df <- merge(path_df,
ht_pik %>% select(Source, Target) %>% rename('PIK' = Source),
by.x = 'Plant',
by.y = 'PIK',
all.x = TRUE,
all.y = FALSE)
path_df <- merge(path_df,
ht_pik %>% select(Source, Target) %>% rename('PIK' = Target),
by.x = 'Plant',
by.y = 'PIK',
all.x = TRUE,
all.y = FALSE)
View(path_df)
path_df <- data.frame('Plant' = plant_clusters)
path_df <- merge(path_df,
ht_pik %>% select(Source, Target) %>% rename('Plant' = Source, 'PIK' = Target),
by.x = 'Plant',
by.y = 'Plant',
all.x = TRUE,
all.y = FALSE)
path_df <- merge(path_df,
ht_pik %>% select(Source, Target) %>% rename('PIK' = Target, 'PIK' = Source),
by.x = 'Plant',
by.y = 'Plant',
all.x = TRUE,
all.y = FALSE)
path_df <- merge(path_df,
ht_pik %>% select(Source, Target) %>% rename('Plant' = Target, 'PIK' = Source),
by.x = 'Plant',
by.y = 'Plant',
all.x = TRUE,
all.y = FALSE)
path_df <- data.frame('Plant' = plant_clusters)
path_df <- merge(path_df,
ht_pik %>% select(Source, Target) %>% rename('Plant' = Source, 'PIK' = Target),
by.x = 'Plant',
by.y = 'Plant',
all.x = TRUE,
all.y = FALSE)
View(path_df)
path_df <- merge(path_df,
ht_pik %>% select(Source, Target) %>% rename('Plant' = Target, 'PIK' = Source),
by.x = 'Plant',
by.y = 'Plant',
all.x = TRUE,
all.y = FALSE)
View(path_df)
test <- lapply(c(1:nrow(heatmap_pairs_selected)), \(x) {
tmp <- sort(c(heatmap_pairs_selected$Source[x], heatmap_pairs_selected$Target[x]))
return(tmp)
})
View(test)
test <- lapply(c(1:nrow(heatmap_pairs_selected)), \(x) {
tmp <- sort(c(heatmap_pairs_selected$Source[x], heatmap_pairs_selected$Target[x]))
return(tmp)
}) %>% data.frame()
View(test)
test <- lapply(c(1:nrow(heatmap_pairs_selected)), \(x) {
tmp <- sort(c(heatmap_pairs_selected$Source[x], heatmap_pairs_selected$Target[x]))
return(tmp)
}) %>% data.frame() %>% t()
View(test)
View(test)
ht_pik <- test %>% filter(V2 == 'Plant')
ht_riken <- test %>% filter(V1 == 'Plant')
test <- lapply(c(1:nrow(heatmap_pairs_selected)), \(x) {
tmp <- sort(c(heatmap_pairs_selected$Source[x], heatmap_pairs_selected$Target[x]))
return(tmp)
}) %>% data.frame() %>% t() %>% data.frame()
View(test)
ht_pik <- test %>% filter(V2 == 'Plant')
View(test)
ht_pik <- test %>% filter(X2 == 'Plant')
ht_pik <- test %>% filter(grepl('Plant', X2))
ht_pik <- test %>% filter(grepl('Plant', X2))
ht_riken <- test %>% filter(grepl('Plant', X1))
View(ht_pik)
path_df <- merge(ht_pik, ht_riken)
View(ht_pik)
ht_pik <- test %>% filter(grepl('Plant', X2)) %>% rename('PIK' = X1, 'Plant' = X2)
ht_riken <- test %>% filter(grepl('Plant', X1))  %>% rename('RIKEN' = X2, 'Plant' = X1)
path_df <- merge(ht_pik, ht_riken)
View(path_df)
path_df <- merge(ht_pik, ht_riken) %>% select(PIK, Plant, RIKEN)
View(path_df)
path_df <- merge(ht_pik, ht_riken) %>% select(PIK, Plant, RIKEN) %>% arrange(PIK, Plant, RIKEN)
View(path_df)
View(path_df)
View(path_df)
View(rcs_merged)
View(rcs_merged)
View(dataset)
my_clusters <- dataset$X_C_label %>% unique()
my_clusters[grepl('PIK', my_clusters)]
dataset$text <- paste(dataset$TI, dataset$AB, sep=' ')
dataset$text[1]
for (cl in my_clusters[grepl('PIK', my_clusters)]) {
tmp <- dataset %>%
filter(X_C_label == cl,
Representative_document) %>%
select(text)
my_clusters_text <- c(my_clusters_text, c(cl, tmp))
}
my_clusters_text <- list()
for (cl in my_clusters[grepl('PIK', my_clusters)]) {
tmp <- dataset %>%
filter(X_C_label == cl,
Representative_document) %>%
select(text)
my_clusters_text <- c(my_clusters_text, c(cl, tmp))
}
my_clusters_text
my_clusters_text <- list()
for (cl in my_clusters[grepl('PIK', my_clusters)]) {
tmp <- dataset %>%
filter(X_C_label == cl,
Representative_document) %>%
select(text)
my_clusters_text <- c(my_clusters_text, c("*****", cl, tmp))
}
my_clusters_text
length(my_clusters[grepl('PIK', my_clusters)])
for (cl in my_clusters[grepl('PIK', my_clusters)]) {
tmp <- dataset %>%
filter(X_C_label == cl,
Representative_document) %>%
select(text)
my_clusters_text <- c(my_clusters_text, c(cl, tmp))
}
my_clusters_text <- list()
for (cl in my_clusters[grepl('PIK', my_clusters)]) {
tmp <- dataset %>%
filter(X_C_label == cl,
Representative_document) %>%
select(text)
my_clusters_text <- c(my_clusters_text, c(cl, tmp))
}
my_clusters_text
my_clusters_text[76]
length(my_clusters[grepl('PIK', my_clusters)])
my_clusters_text <- list()
for (cl in my_clusters[grepl('PIK', my_clusters)]) {
tmp <- dataset %>%
filter(X_C_label == cl,
Representative_document) %>%
muatate(cluster = cl) %>%
select(cluster, text)
my_clusters_text <- c(my_clusters_text, tmp)
}
my_clusters_text <- list()
for (cl in my_clusters[grepl('PIK', my_clusters)]) {
tmp <- dataset %>%
filter(X_C_label == cl,
Representative_document) %>%
mutate(cluster = cl) %>%
select(cluster, text)
my_clusters_text <- c(my_clusters_text, tmp)
}
my_clusters_text[76]
my_clusters_text <- list()
for (cl in my_clusters[grepl('PIK', my_clusters)]) {
tmp <- dataset %>%
filter(X_C_label == cl,
Representative_document) %>%
mutate(cluster = cl) %>%
select(cluster, text)
my_clusters_text <- c(my_clusters_text, tmp)
}
my_clusters_text[76]
my_clusters_text[75]
# It means that you know about ...
MAIN_TOPIC_DESCRIPTION <- "From an academic research perspective, Plant Science, Biodiversity, and Climate Change have several important interconnections:
Ecosystem resilience: Plant science and biodiversity studies inform our understanding of how diverse plant communities respond to and potentially mitigate climate change impacts. More biodiverse ecosystems are often more resilient to environmental stressors.
Carbon sequestration: Plants play a crucial role in carbon capture and storage. Research in plant science helps identify species and ecosystems most effective at sequestering carbon, which is vital for climate change mitigation strategies.
Adaptation strategies: Understanding plant adaptations to changing environments helps predict how species and ecosystems might respond to climate change. This knowledge is crucial for conservation efforts and maintaining biodiversity.
Agricultural sustainability: Climate change affects crop yields and distribution. Plant science research aims to develop climate-resilient crop varieties, which is essential for food security in a changing climate.
Feedback loops: Climate change affects plant distributions and biodiversity, which in turn can influence local and global climate patterns. Studying these interactions is key to predicting future scenarios.
Conservation priorities: Research in these fields helps identify vulnerable species and ecosystems, informing conservation strategies in the face of climate change.
Invasive species management: Climate change can alter the spread and impact of invasive plant species, affecting native biodiversity. Interdisciplinary research helps predict and manage these changes.
Phenology studies: Climate change affects plant life cycles, which has cascading effects on biodiversity. Research in this area connects all three fields.
These interconnections make Plant Science, Biodiversity, and Climate Change highly complementary fields in academic research, often leading to interdisciplinary studies and collaborative projects."#settings$llm$description
###################################
###################################
# Article summary
###################################
prompt_summarize_a_paper <- function(topic, topic_description, article_text){
list('system' = glue('You are a researcher with a great record of publications and that understands what good academic writing is.
Your writing style is that of authors in reputable journals like Nature or Science.
Your answers are concise and avoid adverbs.
Your research of expertice is on <<{topic}>>, meaning that you know about {topic_description}'),
'user' = glue('Be sure that your summary is shorter than the text provided. Summarize in one sentence of less than 50 words, and focussing on "{topic}" the following text: {article_text}'))
}
###################################
###################################
# Cluster description
###################################
prompt_cluster_description <- function(topic, topic_description, cluster_text) {
list('system' = glue('You are a policy consultant with expertise on <<{topic}>>, meaning that you know about {topic_description}
You will be given multiple texts (a.k.a cluster) separated by #####. Your task is to read the texts and find their common topic. Ideally, the common topic should be framed in the context of <<{topic}>>.
To find the topic name you will follow the next steps:
Step 1: You understand the main topic of each text
Step 2: You find common keywords across the texts relevant to <<{topic}>>
Step 3: You summarize all the text in a single paragraph taking into consideration the common keywords and themes.
Step 4: You conclude by giving a name for the common topic shared by the articles.
Your answers are concise.'),
'user' = glue('What is the main topic of the following cluster: {cluster_text}'))
}
###################################
###################################
# Cluster description enhanced
###################################
prompt_cluster_description_enhanced <- function(topic, cluster_description) {
list('system' = glue('Please synthesize the following text in a single cohesive paragraph. Do not mention the texts one by one, but in an integrated and coherent manner. Do not use the word "delve" and do not define <<{topic}>> because the reader already know their meaning'),
'user' = glue('Please synthesize what this cluster is about: {cluster_description}'))
}
###################################
###################################
# Cluster name
###################################
prompt_cluster_name <- function(topic, topic_description, cluster_description) {
list('system' = glue('You are a policy consultant with expertise on <<{topic}>>, meaning that you know about {topic_description}
You will be given the decription of a cluster of documents.
Either extract the cluster name given in the description, or give a short name based on what you read.
Your answers are concise and include only the name of the cluster without any further explanation or introduction.'),
'user' = glue('What is the name of the following cluster?: {cluster_description}'))
}
###################################
###################################
# Cluster figure caption
###################################
prompt_figure_caption <- function(topic){
list('system' = 'You are a researcher with a great record of publications and that understands what good academic writing is.
Your writing style is that of authors in reputable journals like Nature or Science.
Your answers are concise.',
'user' = 'Please provide some bullet points with good practices for figure captions based on standard practices in scientific writing.',
'assistant' = "I can provide some general guidelines for writing figure captions based on standard practices in scientific writing:
1. **Caption Length:** Keep the caption concise but descriptive enough to understand the figure without reading the main text. Typically, a few sentences should be sufficient.
2. **Start with a Title:** The caption should start with a brief title that explains what the figure is about.
3. **Description:** After the title, you should provide a detailed explanation of what the figure is displaying. Include necessary details such as the experiment's conditions, what each part of the figure indicates (e.g., axes of graphs), and the significance of the results.
4. **Avoid Redundancy:** The caption should not just repeat information that's already in the text. Instead, it should complement the text and provide extra information to help readers understand the figure.
5. **Key Details:** Any symbols, abbreviations, and units of measurement used in the figure should be clearly defined in the caption.
6. **Statistical Information:** If your figure includes any statistical data, make sure to include information about the statistical tests used, the number of observations, and any relevant significance values.
7. **Avoid Interpretation:** Try not to include any conclusions or interpretations in the figure caption. The role of the caption is to describe, while interpretation of the data should be left for the main body of the text.
8. **Referencing the Figure:** When you refer to the figure in your text, make sure to use the same terminology as in the caption. For example, if your caption refers to panels A, B, and C, your text should use the same terms.
9. **Readability:** Make sure your caption is easily understandable and accessible to the readership of the journal. Avoid overly technical jargon where possible and consider the background knowledge of your audience.
10. **Proofread:** Finally, make sure to proofread your caption carefully. Errors in your caption can confuse readers and potentially undermine the credibility of your work.",
'user' = glue("Please write concisely a figure caption explaining the following:
-	The figure represents the citation network of {topic}
-	Each cluster is represented with different colors.
-	Clusters are labeled from the largest by the number of documents.
-	Clusters that are near each other tend to be topically related and those apart are topically divergent.")
)
}
###################################
###################################
# Cluster {SENTIMENT} description
# POSITIVE or NEGATIVE
###################################
prompt_cluster_sentiment_description <- function(topic, topic_description, sentiment, cluster_text) {
list(
list(
'role' = 'system',
'content' = 'You are a policy consultant with expertise on <<{topic}>>, meaning that you know about {topic_description}
You will be given multiple texts (a.k.a cluster) separated by #####.
These are {sentiment} news about <<{topic}>>
Your task is to read the texts and find their common topic. Ideally, the common topic should be framed in the context of <<{topic}>>.
To analyze the cluster you will follow these steps:
Step 1: You understand the main topic of each text highlighting their {sentiment} connotation or impact if any.
Step 2: You find common keywords across the texts relevant to <<{topic}>>
Step 3: You explain why all these news are considered to be {sentiment}
Step 4: You summarize all the text in a single paragraph taking into consideration the common keywords and themes.
Your response must not show the steps. Instead, you reply with a paragraph  synthesizing your analysis emphasizing why this cluster is {sentiment}.
'
),
list(
'role' = 'user',
'content' = glue('What is the main topic of the following cluster: {cluster_text}')
)
)
}
##########################################################
# Load libraries
source("04_utils/02_libraries.R")
# Load settings from the project we are interested in
source("settings.R")
##########################################################
##########################################################
##########################################################
library(httr)
library(jsonlite)
claude_api_key = readr::read_file(file.path('05_assets', 'credentials', 'claude.key'))
#' @description
#' Get answers from OpenAI's GPT. Here used for ARTICLE summarization.
#' @param prompt LIST. A prompt in the format of OpenAI. See the code `zz-prompts.R` for details.
#' @param model STRING {gpt-3.5-turbo-0613} the OpenAI Moodel to use. Options: gpt-3.5-turbo-0613, gpt-4, 'gpt-4-0613'
#' @param temperature NUMBER. Between 0 and 2. 0 means less randomness and 2 more creative.
#' @param max_tokens INTEGER. The approx MAX size possible for the reply from ChatGPT.
#' @param n INTEGER. Number of reply variations to get.
#' @returns The JSON reply from OpenAI in R's LIST form. The actual reply text is located at `x$choices[[1]]$message$content`
ask_claude <- function(system_prompt,
user_prompt,
api_key = claude_api_key,
model = 'claude-3-sonnet-20240229',#'claude-3-opus-20240229',
temperature = 0.1,
max_tokens = 500) {
# Set up API endpoint and headers
api_url <- "https://api.anthropic.com/v1/messages"
headers <- c(
"anthropic-version" = "2023-06-01",
"content-type" = "application/json",
"x-api-key" = api_key
)
# Set up the request payload
payload <- list(
system = system_prompt,
model = model,
temperature = temperature,
max_tokens = max_tokens,
messages = list(
list(
'role' = 'user',
'content' = user_prompt
)
)
)
# Send the API request
response <- httr::POST(
url = api_url,
add_headers(headers),
body = toJSON(payload, auto_unbox = TRUE)
)
# Check the response status
if (response$status_code == 200) {
# Parse the JSON response
result <- fromJSON(httr::content(response, as = "text"))
# Extract and print the assistant's response
assistant_response <- result$content$text
return(assistant_response)
} else {
return(paste("Error:", response$status_code))
}
}
##########################################################
##########################################################
##########################################################
# Libraries
library(reticulate)
library(glue)
# Activate enviroment
reticulate::use_condaenv('openai_env')
save.image("~/Library/CloudStorage/GoogleDrive-cristianmejia00@gmail.com/My Drive/PIK-RIKEN/env20240928.RData")
View(dataset)
View(rcs_merged)
