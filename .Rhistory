LinkGroup = "link_group",
colourScale = my_color_scale,
fontSize = 11,
#nodeWidth = 25,
#nodePadding = 10,
#margin = c('right'=420, 'left'=300),
#height = 600,
#width = 12000,
sinksRight = FALSE
)
# Display the Sankey in R
sankey
melted_sankey_topics2 <- melted_sankey_topics %>%
filter(Source %in% a318$cluster_code[a318$relevant]) %>%
filter(!grepl("99---", Source)) %>%
filter(!grepl("99---", Dest))
Read the data
# Read the data
data <- melted_sankey_topics2 #
# Retain upto 50
data <- data %>% top_n(100, wt=Similarity)
# Remove 'others'
data<- data %>%
filter(!grepl("99---|99$", Source)) %>%
filter(!grepl("99---|99$", Dest))
# Remove dashes
data$Source <- gsub("-0---", ": ", data$Source)
data$Dest <- gsub("-0---", ": ", data$Dest)
data$Source <- gsub("---", ": ", data$Source)
data$Dest <- gsub("---", ": ", data$Dest)
# Prepare names
data$Source <- paste(data$Source, data$source_topic)
data$Dest <- paste(data$Dest, data$target_topic)
# Create nodes dataframe
# Get unique nodes from both source and destination
nodes <- unique(c(data$Source, data$Dest))
nodes_group <- sapply(nodes, \(x) {unlist(strsplit(x, "-"))[[1]]})
nodes_dn <- paste0("'", inputs$display_name, "'", collapse = ", ")
nodes_cl <- paste0("'", inputs$color, "'", collapse = ", ")
nodes_df <- data.frame(
name = nodes,
node_group = factor(nodes_group)
)
# Create links dataframe
links_df <- data.frame(
source = match(data$Source, nodes_df$name) - 1,  # 0-based indexing
target = match(data$Dest, nodes_df$name) - 1,
value = rescale(data$Similarity, to = c(10, 100)) #data$Value
)
links_df$link_group <- nodes_df[links_df$target + 1, 'node_group']
# Create custom color scale
my_color_scale <- JS(sprintf(
glue("d3.scaleOrdinal()
.domain([{nodes_dn}])
.range([{nodes_cl}])")
))
# Create Sankey diagram
sankey <- sankeyNetwork(
Links = links_df,
Nodes = nodes_df,
Source = "source",
Target = "target",
Value = "value",
NodeID = "name",
NodeGroup = "node_group",
LinkGroup = "link_group",
colourScale = my_color_scale,
fontSize = 11,
#nodeWidth = 25,
#nodePadding = 10,
#margin = c('right'=420, 'left'=300),
#height = 600,
#width = 12000,
sinksRight = FALSE
)
# Display the Sankey in R
sankey
# Read the data
data <- melted_sankey_topics2 #
# Retain upto 50
data <- data %>% top_n(50, wt=Similarity)
# Remove 'others'
data<- data %>%
filter(!grepl("99---|99$", Source)) %>%
filter(!grepl("99---|99$", Dest))
# Remove dashes
data$Source <- gsub("-0---", ": ", data$Source)
data$Dest <- gsub("-0---", ": ", data$Dest)
data$Source <- gsub("---", ": ", data$Source)
data$Dest <- gsub("---", ": ", data$Dest)
# Prepare names
data$Source <- paste(data$Source, data$source_topic)
data$Dest <- paste(data$Dest, data$target_topic)
# Create nodes dataframe
# Get unique nodes from both source and destination
nodes <- unique(c(data$Source, data$Dest))
nodes_group <- sapply(nodes, \(x) {unlist(strsplit(x, "-"))[[1]]})
nodes_dn <- paste0("'", inputs$display_name, "'", collapse = ", ")
nodes_cl <- paste0("'", inputs$color, "'", collapse = ", ")
nodes_df <- data.frame(
name = nodes,
node_group = factor(nodes_group)
)
# Create links dataframe
links_df <- data.frame(
source = match(data$Source, nodes_df$name) - 1,  # 0-based indexing
target = match(data$Dest, nodes_df$name) - 1,
value = rescale(data$Similarity, to = c(10, 100)) #data$Value
)
links_df$link_group <- nodes_df[links_df$target + 1, 'node_group']
# Create custom color scale
my_color_scale <- JS(sprintf(
glue("d3.scaleOrdinal()
.domain([{nodes_dn}])
.range([{nodes_cl}])")
))
# Create Sankey diagram
sankey <- sankeyNetwork(
Links = links_df,
Nodes = nodes_df,
Source = "source",
Target = "target",
Value = "value",
NodeID = "name",
NodeGroup = "node_group",
LinkGroup = "link_group",
colourScale = my_color_scale,
fontSize = 11,
#nodeWidth = 25,
#nodePadding = 10,
#margin = c('right'=420, 'left'=300),
#height = 600,
#width = 12000,
sinksRight = FALSE
)
# Display the Sankey in R
sankey
# Create Sankey diagram
sankey <- sankeyNetwork(
Links = links_df,
Nodes = nodes_df,
Source = "source",
Target = "target",
Value = "value",
NodeID = "name",
NodeGroup = "node_group",
LinkGroup = "link_group",
colourScale = my_color_scale,
fontSize = 11,
nodeWidth = 25,
#nodePadding = 10,
#margin = c('right'=420, 'left'=300),
#height = 600,
#width = 12000,
sinksRight = FALSE
)
# Display the Sankey in R
sankey
# Create Sankey diagram
sankey <- sankeyNetwork(
Links = links_df,
Nodes = nodes_df,
Source = "source",
Target = "target",
Value = "value",
NodeID = "name",
NodeGroup = "node_group",
LinkGroup = "link_group",
colourScale = my_color_scale,
fontSize = 12,
nodeWidth = 25,
#nodePadding = 10,
#margin = c('right'=420, 'left'=300),
#height = 600,
#width = 12000,
sinksRight = FALSE
)
# Display the Sankey in R
sankey
# Create Sankey diagram
sankey <- sankeyNetwork(
Links = links_df,
Nodes = nodes_df,
Source = "source",
Target = "target",
Value = "value",
NodeID = "name",
NodeGroup = "node_group",
LinkGroup = "link_group",
colourScale = my_color_scale,
fontSize = 12,
nodeWidth = 25,
#nodePadding = 10,
#margin = c('right'=420, 'left'=300),
height = 600,
width = 600,
sinksRight = FALSE
)
# Display the Sankey in R
sankey
# Create Sankey diagram
sankey <- sankeyNetwork(
Links = links_df,
Nodes = nodes_df,
Source = "source",
Target = "target",
Value = "value",
NodeID = "name",
NodeGroup = "node_group",
LinkGroup = "link_group",
colourScale = my_color_scale,
fontSize = 12,
nodeWidth = 25,
#nodePadding = 10,
#margin = c('right'=420, 'left'=300),
height = 600,
width = 1000,
sinksRight = FALSE
)
# Display the Sankey in R
sankey
# Create Sankey diagram
sankey <- sankeyNetwork(
Links = links_df,
Nodes = nodes_df,
Source = "source",
Target = "target",
Value = "value",
NodeID = "name",
NodeGroup = "node_group",
LinkGroup = "link_group",
colourScale = my_color_scale,
fontSize = 12,
nodeWidth = 25,
#nodePadding = 10,
#margin = c('right'=420, 'left'=300),
height = 600,
width = 1100,
sinksRight = FALSE
)
# Display the Sankey in R
sankey
setwd("~/Desktop/GitHub/remind")
#!/usr/bin/env Rscript
# |  (C) 2006-2024 Potsdam Institute for Climate Impact Research (PIK)
# |  authors, and contributors see CITATION.cff file. This file is part
# |  of REMIND and licensed under AGPL-3.0-or-later. Under Section 7 of
# |  AGPL-3.0, you are granted additional permissions described in the
# |  REMIND License Exception, version 1.0 (see LICENSE file).
# |  Contact: remind@pik-potsdam.de
library(gms)
install.packages('gms')
#!/usr/bin/env Rscript
# |  (C) 2006-2024 Potsdam Institute for Climate Impact Research (PIK)
# |  authors, and contributors see CITATION.cff file. This file is part
# |  of REMIND and licensed under AGPL-3.0-or-later. Under Section 7 of
# |  AGPL-3.0, you are granted additional permissions described in the
# |  REMIND License Exception, version 1.0 (see LICENSE file).
# |  Contact: remind@pik-potsdam.de
library(gms)
library(dplyr, warn.conflicts = FALSE)
library(lucode2)
install.packages('lucode2')
renv::restore()
renv::activate()
#!/usr/bin/env Rscript
# |  (C) 2006-2024 Potsdam Institute for Climate Impact Research (PIK)
# |  authors, and contributors see CITATION.cff file. This file is part
# |  of REMIND and licensed under AGPL-3.0-or-later. Under Section 7 of
# |  AGPL-3.0, you are granted additional permissions described in the
# |  REMIND License Exception, version 1.0 (see LICENSE file).
# |  Contact: remind@pik-potsdam.de
library(gms)
#!/usr/bin/env Rscript
# |  (C) 2006-2024 Potsdam Institute for Climate Impact Research (PIK)
# |  authors, and contributors see CITATION.cff file. This file is part
# |  of REMIND and licensed under AGPL-3.0-or-later. Under Section 7 of
# |  AGPL-3.0, you are granted additional permissions described in the
# |  REMIND License Exception, version 1.0 (see LICENSE file).
# |  Contact: remind@pik-potsdam.de
library(gms)
#!/usr/bin/env Rscript
# |  (C) 2006-2024 Potsdam Institute for Climate Impact Research (PIK)
# |  authors, and contributors see CITATION.cff file. This file is part
# |  of REMIND and licensed under AGPL-3.0-or-later. Under Section 7 of
# |  AGPL-3.0, you are granted additional permissions described in the
# |  REMIND License Exception, version 1.0 (see LICENSE file).
# |  Contact: remind@pik-potsdam.de
library(gms)
library(dplyr, warn.conflicts = FALSE)
library(lucode2)
remotes::install_github("pik-piam/lucode2")
remotes::install_github("pik-piam/lucode2")
install.packages("remotes")
remotes::install_github("pik-piam/lucode2")
load("~/Library/CloudStorage/GoogleDrive-cristianmejia00@gmail.com/My Drive/Bibliometrics_Drive/Q327 TI Policy/a01_cn__f01_dc__c01_lv/level1/environ.rdata")
View(rcs_tmp)
write.csv(rcs_tmp %>% select(X_C, color_hex), file = "subcluster_colors.csv", row.names = FALSE)
write.csv(rcs_tmp %>%
select(X_C_name, color_hex) %>%
filter(!grepl("99", X_C_name)),
file = "subcluster_colors.csv", row.names = FALSE)
getwd()
setwd("~/Desktop/GitHub/clustering")
plot_clusters(rcs_merged)
####################################################
# Install packagaes if needed
if (!("tm"          %in% rownames(installed.packages()))) {install.packages("tm")}
if (!("igraph"      %in% rownames(installed.packages()))) {install.packages("igraph")}
if (!("lda"         %in% rownames(installed.packages()))) {install.packages("lda")}
if (!("LDAvis"      %in% rownames(installed.packages()))) {install.packages("LDAvis")}
if (!("servr"       %in% rownames(installed.packages()))) {install.packages("servr")}
if (!("proxy"       %in% rownames(installed.packages()))) {install.packages("proxy")}
if (!("SnowballC"   %in% rownames(installed.packages()))) {install.packages("SnowballC")}
if (!("data.table"  %in% rownames(installed.packages()))) {install.packages("data.table")}
if (!("Rmpfr"       %in% rownames(installed.packages()))) {install.packages("Rmpfr")}
if (!("plyr"        %in% rownames(installed.packages()))) {install.packages("plyr")}
if (!("dplyr"       %in% rownames(installed.packages()))) {install.packages("dplyr")}
if (!("topicmodels" %in% rownames(installed.packages()))) {install.packages("topicmodels")}
if (!("ldatuning"   %in% rownames(installed.packages()))) {install.packages("ldatuning")}
if (!("plotly"      %in% rownames(installed.packages()))) {install.packages("plotly")}
if (!("stringr"     %in% rownames(installed.packages()))) {install.packages("stringr")}
if (!("ngram"       %in% rownames(installed.packages()))) {install.packages("ngram")}
if (!("slam"        %in% rownames(installed.packages()))) {install.packages("slam")}
if (!("Rtsne"       %in% rownames(installed.packages()))) {install.packages("Rtsne")}
if (!("tools"       %in% rownames(installed.packages()))) {install.packages("tools")}
if (!("devtools"    %in% rownames(installed.packages()))) {install.packages("devtools")}
if (!("Opener5"     %in% rownames(installed.packages()))) {
library(devtools)
install_github("cristianmejia00/Opener5")
}
if (!("DT"          %in% rownames(installed.packages()))) {install.packages("DT")}
if (!("glue"        %in% rownames(installed.packages()))) {install.packages("glue")}
if (!("svglite"     %in% rownames(installed.packages()))) {install.packages("svglite")}
if (!("uuid"        %in% rownames(installed.packages()))) {install.packages("uuid")}
####################################################
# Load libraries
library(tm)
library(igraph)
library(lda)
library(LDAvis)
library(servr)
library(proxy)
library(SnowballC)
library(data.table)
# sudo apt-get install libmpfr-dev
library(Rmpfr)
library(plyr)
library(dplyr)
# sudo apt-get install libgsl-dev
library(topicmodels)
library(ldatuning)
# apt-get install r-cran-rjava
#library(qdap)
library(plotly)
library(stringr)
library(ngram)
#library(devtools)
#install_github("cristianmejia00/Opener5")
library(Opener5)
#library(rowr) #Not available for R 3.6.3 (?!) Dont know where it goes.
library(slam)
library(Rtsne)
library(tools)
library(DT)
library(glue)
library(uuid)
plot_clusters(rcs_merged)
library(ggrepel)
plot_clusters(rcs_merged)
plot_clusters
View(rcs_merged)
View(rcs_tmp)
load("~/Library/CloudStorage/GoogleDrive-cristianmejia00@gmail.com/My Drive/Bibliometrics_Drive/Q327 TI Policy/a01_cn__f01_dc__c01_lv/level1/environ_llm.rdata")
View(rcs_tmp)
View(rcs_merged)
rcs_tmp$cluster_name <- NULL
rcs_tmp2 <- merge(rcs_tmp, rcs_merged %>% select(cluster_code, cluster_name),
by = "cluster_code",
all.x = TRUE,
all.y = FALSE)
View(rcs_tmp2)
plot_scatter(rcs_data = rcs_tmp2,
point_labels = "cluster_name",
x_column = "x",
y_column = "y",
color_hex_column = "color_hex",
size_column = "documents")
View(rcs_tmp2)
plot_scatter(rcs_data = rcs_tmp2,
point_labels = "cluster_name",
x_column = "x",
y_column = "y",
color_labels = "main_cluster",
color_hex_column = "color_hex",
size_column = "documents")
View(rcs_tmp2)
View(rcs_tmp2)
View(rcs_merged)
View(rcs_merged)
View(rcs_tmp2)
plot_scatter(rcs_data = rcs_tmp2,
point_labels = "cluster_name",
x_column = "PY_Mean",
y_column = "Z9_Mean",
color_labels = "main_cluster",
color_hex_column = "color_hex",
size_column = "documents")
rcs_tmp2$labels = paste(rcs_tmp2$cluster_code, rcs_tmp2$cluster_name, sep = "")
plot_scatter(rcs_data = rcs_tmp2,
point_labels = "labels",
x_column = "PY_Mean",
y_column = "Z9_Mean",
color_labels = "main_cluster",
color_hex_column = "color_hex",
size_column = "documents")
rcs_tmp2$labels = paste(rcs_tmp2$cluster_code, rcs_tmp2$cluster_name, sep = " ")
plot_scatter(rcs_data = rcs_tmp2,
point_labels = "labels",
x_column = "PY_Mean",
y_column = "Z9_Mean",
color_labels = "main_cluster",
color_hex_column = "color_hex",
size_column = "documents")
##################################################################
# SCATTERPLOT: Ave. Year x Cites
##################################################################
plot_scatter <- function(rcs_data,
point_labels,
x_column,
y_column,
color_hex_column,
color_labels,
size_column,
x_column_label = x_column,
y_column_label = y_column) {
# format the df
df <- rcs_data[, c(point_labels, x_column, y_column, color_hex_column, color_labels, size_column)]
colnames(df) <- c("point_labels", "x", "y", "color_hex", "color_label", "size")
df$labels <- as.character(df$point_labels)
p <- ggplot(df, aes(x = x, y = y)) +
geom_point(aes(color = color_hex,
size = size)) +
scale_color_identity(df$color_hex) +
xlab(x_column_label) +
ylab(y_column_label)
p <- p + geom_text_repel(aes(label = gsub("---|-0", "", labels)), max.overlaps = 50)
p <- p + theme_bw() + theme(legend.position = "none")
p
}
plot_scatter(rcs_data = rcs_tmp2,
point_labels = "labels",
x_column = "PY_Mean",
y_column = "Z9_Mean",
color_labels = "main_cluster",
color_hex_column = "color_hex",
size_column = "documents")
##################################################################
# SCATTERPLOT: Ave. Year x Cites
##################################################################
plot_scatter <- function(rcs_data,
point_labels,
x_column,
y_column,
color_hex_column,
color_labels,
size_column,
x_column_label = x_column,
y_column_label = y_column) {
# format the df
df <- rcs_data[, c(point_labels, x_column, y_column, color_hex_column, color_labels, size_column)]
colnames(df) <- c("point_labels", "x", "y", "color_hex", "color_label", "size")
df$labels <- as.character(df$point_labels)
p <- ggplot(df, aes(x = x, y = y)) +
geom_point(aes(color = color_hex,
size = size)) +
scale_color_identity(df$color_hex) +
xlab(x_column_label) +
ylab(y_column_label)
p <- p + geom_text_repel(aes(label = gsub("---|-0", "", labels)))
p <- p + theme_bw() + theme(legend.position = "none")
p
}
plot_scatter(rcs_data = rcs_tmp2,
point_labels = "labels",
x_column = "PY_Mean",
y_column = "Z9_Mean",
color_labels = "main_cluster",
color_hex_column = "color_hex",
size_column = "documents")
load("~/Library/CloudStorage/GoogleDrive-cristianmejia00@gmail.com/My Drive/Bibliometrics_Drive/Q327 TI Policy/a01_cn__f01_dc__c01_lv/level0/environ_llm.rdata")
rcs_tmp$cluster_name <- NULL
rcs_tmp2 <- merge(rcs_tmp, rcs_merged %>% select(cluster_code, cluster_name),
by = "cluster_code",
all.x = TRUE,
all.y = FALSE)
rcs_tmp2$labels = paste(rcs_tmp2$cluster_code, rcs_tmp2$cluster_name, sep = " ")
plot_scatter(rcs_data = rcs_tmp2,
point_labels = "labels",
x_column = "PY_Mean",
y_column = "Z9_Mean",
color_labels = "main_cluster",
color_hex_column = "color_hex",
size_column = "documents")
rcs_tmp2$labels[rcs_tmp2$cluster_code == 25] <- "25 Public Policy Implementation and Service Accessibility"
plot_scatter(rcs_data = rcs_tmp2,
point_labels = "labels",
x_column = "PY_Mean",
y_column = "Z9_Mean",
color_labels = "main_cluster",
color_hex_column = "color_hex",
size_column = "documents")
