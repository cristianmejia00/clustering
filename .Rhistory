cluster_data <- cluster_data[!is.na(cluster_data[[1]]),]
# Adjust label size
cluster_data[[1]] <- tolower(cluster_data[[1]]) %>%
substr(start = 0, stop = 20)
cluster_data[[1]][duplicated(cluster_data[[1]])] <- paste(cluster_data[[1]][duplicated(cluster_data[[1]])], ' ', sep = '')
cluster_levels <- cluster_data[[1]][order(cluster_data[[column_data_position]])]
cluster_levels <- cluster_levels[!is.na(cluster_levels)]
cluster_labels <- sapply(cluster_levels,
function(x) {
if (nchar(x) >= 20) {
paste(x, '...', sep = '')
} else {
x
}})
cluster_data[[1]] <- factor(cluster_data[[1]],
levels = cluster_levels,
labels = cluster_labels)
p <- ggplot(cluster_data[c(1:min(20, nrow(cluster_data))),],
aes(x=.data[[names(cluster_data)[1]]],
y=.data[[names(cluster_data)[column_data_position]]],
na.rm = TRUE)) +
geom_bar(stat = "identity", width = 0.7, fill = "deepskyblue3") +
scale_y_continuous(name=document_label, limits=c(0, max(plot_data[[column_data_position]]))) +
#scale_x_discrete(name=item_label) +
coord_flip() +
theme_bw()
return(p)
}
# Plot and save
available_charts <- c("WC")# names(charts_datasets)
for (i in available_charts) {
tmp <- charts_datasets[[i]]
clusters_n <- unique(tmp$Cluster) %>% sort()
clusters_n <- clusters_n[clusters_n != 0]
char_size <- get_digits(max(clusters_n))
for (j in clusters_n) {
print(i)
print(j)
if (tolower(i) %in% c('keyword', 'keywords')) {
plot_cluster_data(tmp, j, column_data_position = 5, item_label = column_labels[i], document_label ='TFIDF')
} else {
plot_cluster_data(tmp, j, item_label = column_labels[i])
}
# by columns
if (extension != 'svg') {
ggsave(filename = file.path(output_folder_level,
subfolder_clusters,
'by_columns',
glue('fig_{i}_{str_pad(j, char_size, "left", "0")}.{extension}')),
width = 1000,
height = 1000,
units = 'px')
}
# by cluster
ggsave(filename = file.path(output_folder_level,
subfolder_clusters,
'by_clusters',
glue('fig_{str_pad(j, char_size, "left", "0")}_{i}.{extension}')),
width = 1000,
height = 1000,
units = 'px')
}
}
################################################################################
# Create output folder
dir.create(file.path(output_folder_level, subfolder_clusters, 'by_clusters_'), recursive = TRUE)
# Plot and save
available_charts <- c("WC")# names(charts_datasets)
for (i in available_charts) {
tmp <- charts_datasets[[i]]
clusters_n <- unique(tmp$Cluster) %>% sort()
clusters_n <- clusters_n[clusters_n != 0]
char_size <- get_digits(max(clusters_n))
for (j in clusters_n) {
print(i)
print(j)
if (tolower(i) %in% c('keyword', 'keywords')) {
plot_cluster_data(tmp, j, column_data_position = 5, item_label = column_labels[i], document_label ='TFIDF')
} else {
plot_cluster_data(tmp, j, item_label = column_labels[i])
}
# by columns
if (extension != 'svg') {
ggsave(filename = file.path(output_folder_level,
subfolder_clusters,
'by_columns',
glue('fig_{i}_{str_pad(j, char_size, "left", "0")}.{extension}')),
width = 1000,
height = 1000,
units = 'px')
}
# by cluster
ggsave(filename = file.path(output_folder_level,
subfolder_clusters,
'by_clusters',
glue('fig_{str_pad(j, char_size, "left", "0")}_{i}.{extension}')),
width = 1000,
height = 1000,
units = 'px')
}
}
# Plot and save
available_charts <- c("WC")# names(charts_datasets)
for (i in available_charts) {
tmp <- charts_datasets[[i]]
clusters_n <- unique(tmp$Cluster) %>% sort()
clusters_n <- clusters_n[clusters_n != 0]
char_size <- get_digits(max(clusters_n))
for (j in clusters_n) {
print(i)
print(j)
if (tolower(i) %in% c('keyword', 'keywords')) {
plot_cluster_data(tmp, j, column_data_position = 5, item_label = column_labels[i], document_label ='TFIDF')
} else {
plot_cluster_data(tmp, j, item_label = column_labels[i])
}
# by columns
if (extension != 'svg') {
xxfile <- file.path(output_folder_level,
subfolder_clusters,
'by_columns',
glue('fig_{i}_{str_pad(j, char_size, "left", "0")}.{extension}'))
print(xxfile)
ggsave(filename = xxfile,
width = 1000,
height = 1000,
units = 'px')
}
# by cluster
xxfile <- file.path(output_folder_level,
subfolder_clusters,
'by_clusters',
glue('fig_{str_pad(j, char_size, "left", "0")}_{i}.{extension}'))
print(xxfile)
ggsave(filename = xxfile,
width = 1000,
height = 1000,
units = 'px')
}
}
#' @description
#' Generate a ggplot bar plot for cluster's categorical columns
#' @param plot_data DATAFRAME. a long report for a given column
#' @param cluster_number INTEGER. the cluster number
#' @param column_data_position INTEGER. {2} The position of the column with data values
#' @param item_label STRING. {"ITEM"} the column label
#' @param document_label STRING. {"Documents"} what is being counted
#' @returns a bar plot ggplot
plot_cluster_data <- function(plot_data, cluster_number, column_data_position = 2, item_label = 'Item', document_label = 'Documents') {
plot_data <- plot_data[plot_data$Cluster != 0,]
cluster_data <- plot_data[plot_data$Cluster == cluster_number,]
# Remove potential white spaces
cluster_data <- cluster_data[cluster_data[[1]] != '',]
cluster_data <- cluster_data[cluster_data[[1]] != ' ',]
cluster_data <- cluster_data[cluster_data[[1]] != 'NA',]
cluster_data <- cluster_data[!is.na(cluster_data[[1]]),]
# Adjust label size
cluster_data[[1]] <- tolower(cluster_data[[1]]) %>%
substr(start = 0, stop = 20)
cluster_data[[1]][duplicated(cluster_data[[1]])] <- paste(cluster_data[[1]][duplicated(cluster_data[[1]])], ' ', sep = '')
cluster_levels <- cluster_data[[1]][order(cluster_data[[column_data_position]])]
cluster_levels <- cluster_levels[!is.na(cluster_levels)]
cluster_labels <- sapply(cluster_levels,
function(x) {
if (nchar(x) >= 20) {
paste(x, '...', sep = '')
} else {
x
}})
cluster_data[[1]] <- factor(cluster_data[[1]],
levels = cluster_levels,
labels = cluster_labels)
p <- ggplot(cluster_data[c(1:min(20, nrow(cluster_data))),],
aes(x=.data[[names(cluster_data)[1]]],
y=.data[[names(cluster_data)[column_data_position]]],
na.rm = TRUE)) +
geom_bar(stat = "identity", width = 0.7, fill = "deepskyblue3") +
scale_y_continuous(name=document_label, limits=c(0, max(plot_data[[column_data_position]]))) +
#scale_x_discrete(name=item_label) +
coord_flip() +
theme_bw()
return(p)
}
# Plot and save
available_charts <- c("WC")# names(charts_datasets)
for (i in available_charts) {
tmp <- charts_datasets[[i]]
clusters_n <- unique(tmp$Cluster) %>% sort()
clusters_n <- clusters_n[clusters_n != 0]
char_size <- get_digits(max(clusters_n))
for (j in clusters_n) {
print(i)
print(j)
if (tolower(i) %in% c('keyword', 'keywords')) {
plot_cluster_data(tmp, j, column_data_position = 5, item_label = column_labels[i], document_label ='TFIDF')
} else {
plot_cluster_data(tmp, j, item_label = column_labels[i])
}
# by columns
if (extension != 'svg') {
xxfile <- file.path(output_folder_level,
subfolder_clusters,
'by_columns',
glue('fig_{i}_{str_pad(j, char_size, "left", "0")}.{extension}'))
print(xxfile)
ggsave(filename = xxfile,
width = 1000,
height = 1000,
units = 'px')
}
# by cluster
xxfile <- file.path(output_folder_level,
subfolder_clusters,
'by_clusters',
glue('fig_{str_pad(j, char_size, "left", "0")}_{i}.{extension}'))
print(xxfile)
ggsave(filename = xxfile,
width = 1000,
height = 1000,
units = 'px')
}
}
#' @description
#' Generate a ggplot bar plot for cluster's categorical columns
#' @param plot_data DATAFRAME. a long report for a given column
#' @param cluster_number INTEGER. the cluster number
#' @param column_data_position INTEGER. {2} The position of the column with data values
#' @param item_label STRING. {"ITEM"} the column label
#' @param document_label STRING. {"Documents"} what is being counted
#' @returns a bar plot ggplot
plot_cluster_data <- function(plot_data, cluster_number, column_data_position = 2, item_label = 'Item', document_label = 'Documents') {
plot_data <- plot_data[plot_data$Cluster != 0,]
cluster_data <- plot_data[plot_data$Cluster == cluster_number,]
# Remove potential white spaces
cluster_data <- cluster_data[cluster_data[[1]] != '',]
cluster_data <- cluster_data[cluster_data[[1]] != ' ',]
cluster_data <- cluster_data[cluster_data[[1]] != 'NA',]
cluster_data <- cluster_data[!is.na(cluster_data[[1]]),]
# Adjust label size
cluster_data[[1]] <- tolower(cluster_data[[1]]) %>%
substr(start = 0, stop = 20)
cluster_data[[1]][duplicated(cluster_data[[1]])] <- paste(cluster_data[[1]][duplicated(cluster_data[[1]])], ' ', sep = '')
cluster_levels <- cluster_data[[1]][order(cluster_data[[column_data_position]])]
cluster_levels <- cluster_levels[!is.na(cluster_levels)]
cluster_labels <- sapply(cluster_levels,
function(x) {
if (nchar(x) >= 20) {
paste(x, '...', sep = '')
} else {
x
}})
cluster_data[[1]] <- factor(cluster_data[[1]],
levels = cluster_levels,
labels = cluster_labels)
p <- ggplot(cluster_data[c(1:min(20, nrow(cluster_data))),],
aes(x=.data[[names(cluster_data)[1]]],
y=.data[[names(cluster_data)[column_data_position]]],
na.rm = TRUE)) +
geom_bar(stat = "identity", width = 0.7, fill = "deepskyblue3") +
scale_y_continuous(name=document_label, limits=c(0, max(plot_data[[column_data_position]]))) +
#scale_x_discrete(name=item_label) +
coord_flip() +
theme_bw(axis.title.x=element_blank(),
axis.title.y=element_blank())
return(p)
}
# Plot and save
available_charts <- c("WC")# names(charts_datasets)
for (i in available_charts) {
tmp <- charts_datasets[[i]]
clusters_n <- unique(tmp$Cluster) %>% sort()
clusters_n <- clusters_n[clusters_n != 0]
char_size <- get_digits(max(clusters_n))
for (j in clusters_n) {
print(i)
print(j)
if (tolower(i) %in% c('keyword', 'keywords')) {
plot_cluster_data(tmp, j, column_data_position = 5, item_label = column_labels[i], document_label ='TFIDF')
} else {
plot_cluster_data(tmp, j, item_label = column_labels[i])
}
# by columns
if (extension != 'svg') {
xxfile <- file.path(output_folder_level,
subfolder_clusters,
'by_columns',
glue('fig_{i}_{str_pad(j, char_size, "left", "0")}.{extension}'))
print(xxfile)
ggsave(filename = xxfile,
width = 1000,
height = 1000,
units = 'px')
}
# by cluster
xxfile <- file.path(output_folder_level,
subfolder_clusters,
'by_clusters',
glue('fig_{str_pad(j, char_size, "left", "0")}_{i}.{extension}'))
print(xxfile)
ggsave(filename = xxfile,
width = 1000,
height = 1000,
units = 'px')
}
}
#' @description
#' Generate a ggplot bar plot for cluster's categorical columns
#' @param plot_data DATAFRAME. a long report for a given column
#' @param cluster_number INTEGER. the cluster number
#' @param column_data_position INTEGER. {2} The position of the column with data values
#' @param item_label STRING. {"ITEM"} the column label
#' @param document_label STRING. {"Documents"} what is being counted
#' @returns a bar plot ggplot
plot_cluster_data <- function(plot_data, cluster_number, column_data_position = 2, item_label = 'Item', document_label = 'Documents') {
plot_data <- plot_data[plot_data$Cluster != 0,]
cluster_data <- plot_data[plot_data$Cluster == cluster_number,]
# Remove potential white spaces
cluster_data <- cluster_data[cluster_data[[1]] != '',]
cluster_data <- cluster_data[cluster_data[[1]] != ' ',]
cluster_data <- cluster_data[cluster_data[[1]] != 'NA',]
cluster_data <- cluster_data[!is.na(cluster_data[[1]]),]
# Adjust label size
cluster_data[[1]] <- tolower(cluster_data[[1]]) %>%
substr(start = 0, stop = 20)
cluster_data[[1]][duplicated(cluster_data[[1]])] <- paste(cluster_data[[1]][duplicated(cluster_data[[1]])], ' ', sep = '')
cluster_levels <- cluster_data[[1]][order(cluster_data[[column_data_position]])]
cluster_levels <- cluster_levels[!is.na(cluster_levels)]
cluster_labels <- sapply(cluster_levels,
function(x) {
if (nchar(x) >= 20) {
paste(x, '...', sep = '')
} else {
x
}})
cluster_data[[1]] <- factor(cluster_data[[1]],
levels = cluster_levels,
labels = cluster_labels)
p <- ggplot(cluster_data[c(1:min(20, nrow(cluster_data))),],
aes(x=.data[[names(cluster_data)[1]]],
y=.data[[names(cluster_data)[column_data_position]]],
na.rm = TRUE)) +
geom_bar(stat = "identity", width = 0.7, fill = "deepskyblue3") +
scale_y_continuous(name=document_label, limits=c(0, max(plot_data[[column_data_position]]))) +
#scale_x_discrete(name=item_label) +
coord_flip() +
theme_bw() +
theme(axis.title.x=element_blank(),
axis.title.y=element_blank())
return(p)
}
# Plot and save
available_charts <- c("WC")# names(charts_datasets)
for (i in available_charts) {
tmp <- charts_datasets[[i]]
clusters_n <- unique(tmp$Cluster) %>% sort()
clusters_n <- clusters_n[clusters_n != 0]
char_size <- get_digits(max(clusters_n))
for (j in clusters_n) {
print(i)
print(j)
if (tolower(i) %in% c('keyword', 'keywords')) {
plot_cluster_data(tmp, j, column_data_position = 5, item_label = column_labels[i], document_label ='TFIDF')
} else {
plot_cluster_data(tmp, j, item_label = column_labels[i])
}
# by columns
if (extension != 'svg') {
xxfile <- file.path(output_folder_level,
subfolder_clusters,
'by_columns',
glue('fig_{i}_{str_pad(j, char_size, "left", "0")}.{extension}'))
print(xxfile)
ggsave(filename = xxfile,
width = 1000,
height = 1000,
units = 'px')
}
# by cluster
xxfile <- file.path(output_folder_level,
subfolder_clusters,
'by_clusters',
glue('fig_{str_pad(j, char_size, "left", "0")}_{i}.{extension}'))
print(xxfile)
ggsave(filename = xxfile,
width = 1000,
height = 1000,
units = 'px')
}
}
#' @description
#' Generate a ggplot bar plot for cluster's categorical columns
#' @param plot_data DATAFRAME. a long report for a given column
#' @param cluster_number INTEGER. the cluster number
#' @param column_data_position INTEGER. {2} The position of the column with data values
#' @param item_label STRING. {"ITEM"} the column label
#' @param document_label STRING. {"Documents"} what is being counted
#' @returns a bar plot ggplot
plot_cluster_data <- function(plot_data, cluster_number, column_data_position = 2, item_label = 'Item', document_label = 'Documents') {
plot_data <- plot_data[plot_data$Cluster != 0,]
cluster_data <- plot_data[plot_data$Cluster == cluster_number,]
# Remove potential white spaces
cluster_data <- cluster_data[cluster_data[[1]] != '',]
cluster_data <- cluster_data[cluster_data[[1]] != ' ',]
cluster_data <- cluster_data[cluster_data[[1]] != 'NA',]
cluster_data <- cluster_data[!is.na(cluster_data[[1]]),]
# Adjust label size
cluster_data[[1]] <- tolower(cluster_data[[1]]) %>%
substr(start = 0, stop = 20)
cluster_data[[1]][duplicated(cluster_data[[1]])] <- paste(cluster_data[[1]][duplicated(cluster_data[[1]])], ' ', sep = '')
cluster_levels <- cluster_data[[1]][order(cluster_data[[column_data_position]])]
cluster_levels <- cluster_levels[!is.na(cluster_levels)]
cluster_labels <- sapply(cluster_levels,
function(x) {
if (nchar(x) >= 20) {
paste(x, '...', sep = '')
} else {
x
}})
cluster_data[[1]] <- factor(cluster_data[[1]],
levels = cluster_levels,
labels = cluster_labels)
p <- ggplot(cluster_data[c(1:min(5, nrow(cluster_data))),],
aes(x=.data[[names(cluster_data)[1]]],
y=.data[[names(cluster_data)[column_data_position]]],
na.rm = TRUE)) +
geom_bar(stat = "identity", width = 0.7, fill = "deepskyblue3") +
scale_y_continuous(name=document_label, limits=c(0, max(plot_data[[column_data_position]]))) +
#scale_x_discrete(name=item_label) +
coord_flip() +
theme_bw() +
theme(axis.title.x=element_blank(),
axis.title.y=element_blank())
return(p)
}
# Plot and save
available_charts <- c("WC")# names(charts_datasets)
for (i in available_charts) {
tmp <- charts_datasets[[i]]
clusters_n <- unique(tmp$Cluster) %>% sort()
clusters_n <- clusters_n[clusters_n != 0]
char_size <- get_digits(max(clusters_n))
for (j in clusters_n) {
print(i)
print(j)
if (tolower(i) %in% c('keyword', 'keywords')) {
plot_cluster_data(tmp, j, column_data_position = 5, item_label = column_labels[i], document_label ='TFIDF')
} else {
plot_cluster_data(tmp, j, item_label = column_labels[i])
}
# by columns
if (extension != 'svg') {
xxfile <- file.path(output_folder_level,
subfolder_clusters,
'by_columns',
glue('fig_{i}_{str_pad(j, char_size, "left", "0")}_.{extension}'))
print(xxfile)
ggsave(filename = xxfile,
width = 1000,
height = 1000,
units = 'px')
}
# by cluster
xxfile <- file.path(output_folder_level,
subfolder_clusters,
'by_clusters',
glue('fig_{str_pad(j, char_size, "left", "0")}_{i}_.{extension}'))
print(xxfile)
ggsave(filename = xxfile,
width = 1000,
height = 1000,
units = 'px')
}
}
# Plot and save
available_charts <- c("WC")# names(charts_datasets)
for (i in available_charts) {
tmp <- charts_datasets[[i]]
clusters_n <- unique(tmp$Cluster) %>% sort()
clusters_n <- clusters_n[clusters_n != 0]
char_size <- get_digits(max(clusters_n))
for (j in clusters_n) {
print(i)
print(j)
if (tolower(i) %in% c('keyword', 'keywords')) {
plot_cluster_data(tmp, j, column_data_position = 5, item_label = column_labels[i], document_label ='TFIDF')
} else {
plot_cluster_data(tmp, j, item_label = column_labels[i])
}
# by columns
if (extension != 'svg') {
xxfile <- file.path(output_folder_level,
subfolder_clusters,
'by_columns',
glue('fig_{i}_{str_pad(j, char_size, "left", "0")}_.{extension}'))
print(xxfile)
ggsave(filename = xxfile,
width = 1000,
height = 500,
units = 'px')
}
# by cluster
xxfile <- file.path(output_folder_level,
subfolder_clusters,
'by_clusters',
glue('fig_{str_pad(j, char_size, "left", "0")}_{i}_.{extension}'))
print(xxfile)
ggsave(filename = xxfile,
width = 1000,
height = 500,
units = 'px')
}
}
