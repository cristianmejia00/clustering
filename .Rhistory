rw[3] <- i
}
}
#new_row
results <- list()
nr <- c()
p <- 0
for (i in ttt$Field) {
# 01 - Field
if (i %in% abs_fields) {
print("new_row_found")
p <- 1
results <- c(results, nr)
nr <- c()
rw[1] <- i
}
# 02 - Journal
if (p == 1) {
p <- 2
rw[2] <- i
}
# 03 - ABS 2024
if (p == 2) {
p <- 3
rw[3] <- i
}
}
#new_row
results <- list()
nr <- c()
p <- 0
for (i in ttt$Field) {
# 01 - Field
if (i %in% abs_fields) {
print("new_row_found")
p <- 1
results <- c(results, nr)
nr <- c()
nr[1] <- i
}
# 02 - Journal
if (p == 1) {
p <- 2
nr[2] <- i
}
# 03 - ABS 2024
if (p == 2) {
p <- 3
nr[3] <- i
}
}
View(results)
#new_row
results <- list()
nr <- c()
p <- 0
for (i in ttt$Field) {
# 01 - Field
if (i %in% abs_fields) {
print("new_row_found")
p <- 1
results <- c(results, nr)
nr <- c()
nr[[1]] <- i
}
# 02 - Journal
if (p == 1) {
p <- 2
nr[[2]] <- i
}
# 03 - ABS 2024
if (p == 2) {
p <- 3
nr[[3]] <- i
print(nr)
}
}
#new_row
results <- list()
nr <- c()
p <- 0
for (i in ttt$Field) {
# 01 - Field
if (i %in% abs_fields) {
print("new_row_found")
p <- 1
results <- c(results, nr)
nr <- c()
nr[[1]] <- i
break
}
# 02 - Journal
if (p == 1) {
p <- 2
nr[[2]] <- i
break
}
# 03 - ABS 2024
if (p == 2) {
p <- 3
nr[[3]] <- i
print(nr)
break
}
}
#new_row
results <- list()
nr <- c()
p <- 0
for (i in ttt$Field) {
# 01 - Field
if (i %in% abs_fields) {
print("new_row_found")
p <- 1
results <- c(results, nr)
nr <- c()
nr[[1]] <- i
break
}
# 02 - Journal
if (p == 1) {
p <- 2
nr[[2]] <- i
break
}
# 03 - ABS 2024
if (p == 2) {
p <- 3
nr[[3]] <- i
print(nr)
break
}
}
#new_row
results <- list()
nr <- c()
p <- 0
for (i in ttt$Field) {
# 01 - Field
if (i %in% abs_fields) {
print("new_row_found")
p <- 1
results <- c(results, nr)
nr <- c()
nr[1] <- i
break
}
# 02 - Journal
if (p == 1) {
p <- 2
nr[2] <- i
break
}
# 03 - ABS 2024
if (p == 2) {
p <- 3
nr[3] <- i
print(nr)
break
}
}
#new_row
results <- list()
nr <- c()
p <- 0
for (i in ttt$Field) {
# 01 - Field
if (i %in% abs_fields) {
print("new_row_found")
p <- 1
results <- c(results, nr)
nr <- c()
nr[1] <- i
next
}
# 02 - Journal
if (p == 1) {
p <- 2
nr[2] <- i
next
}
# 03 - ABS 2024
if (p == 2) {
p <- 3
nr[3] <- i
print(nr)
next
}
}
#new_row
results <- list()
nr <- c()
p <- 0
for (i in ttt$Field) {
# 01 - Field
if (i %in% abs_fields) {
print("new_row_found")
p <- 1
results <- c(results, nr)
nr <- c()
nr[[1]] <- i
next
}
# 02 - Journal
if (p == 1) {
p <- 2
nr[[2]] <- i
next
}
# 03 - ABS 2024
if (p == 2) {
p <- 3
nr[[3]] <- i
print(nr)
next
}
}
#new_row
results <- list()
nr <- c()
p <- 0
for (i in ttt$Field) {
# 01 - Field
if (i %in% abs_fields) {
print("new_row_found")
p <- 1
results <- c(results, list(nr))
nr <- c()
nr[[1]] <- i
next
}
# 02 - Journal
if (p == 1) {
p <- 2
nr[[2]] <- i
next
}
# 03 - ABS 2024
if (p == 2) {
p <- 3
nr[[3]] <- i
print(nr)
next
}
}
#new_row
results <- list()
nr <- c()
p <- 0
for (i in ttt$Field) {
# 01 - Field
if (i %in% abs_fields) {
print("new_row_found")
p <- 1
results <- c(results, list(nr))
nr <- c()
nr[[1]] <- i
next
}
# 02 - Journal
if (p == 1) {
p <- 2
nr[[2]] <- i
next
}
# 03 - ABS 2024
if (p == 2) {
p <- 3
nr[[3]] <- i
print(nr)
next
}
}
lll <- data.frame(results)
results[[0]] <- NULL
lll <- as.data.frame.list(results)
lll <- as.data.frame.array(results)
lll <- as.data.frame(results)
results <- results[2:length(results)]
lll <- as.data.frame(results)
View(lll)
lll <- data.frame(results)
lll <- as.data.frame.list(results)
lll <- as.data.frame.array(results)
lll <- as.data.frame.table(results)
lll <- as.data.frame.vector(results)
View(lll)
lll <- as.data.frame.AsIs(results)
lll <- as.data.frame.data.frame(results)
lll <- as.data.frame.raw(results)
lll <- as.data.frame.array(results)
lll <- as.data.frame.ts(results)
lll <- as.data.frame.factor(results)
lll <- data.frame(results)
lll <- as.data.frame(results)
lll <- as.data.frame.list(results)
lll <- as.data.frame.array(results)
lll <- as.data.frame.table(results)
lll <- as.data.frame.AsIs(results)
View(lll)
results[[3]]
#new_row
results <- list()
nr <- c()
p <- 0
for (i in ttt$Field) {
# 01 - Field
if (i %in% abs_fields) {
print("new_row_found")
p <- 1
results <- c(results, list(nr))
nr <- c()
nr[1] <- i
next
}
# 02 - Journal
if (p == 1) {
p <- 2
nr[2] <- i
next
}
# 03 - ABS 2024
if (p == 2) {
p <- 3
nr[3] <- i
print(nr)
next
}
}
results <- results[2:length(results)]
lll <- as.data.frame.AsIs(results)
lll <- as.data.frame.array(results)
lll <- as.data.frame.list(results)
View(lll)
lll <- as.data.frame(results)
lll <- data.frame(results)
lll <- as.data.frame.AsIs(results)
lll <- as.data.frame.character(results)
lll <- as.data.frame.vector(results)
View(lll)
lll <- as.data.frame.factor(results)
View(lll)
lll <- as.data.frame.list(results)
lll <- as.data.frame.list(results) %>% t()
View(lll)
rownames(lll) <- NULL
View(lll)
results <- results[2:length(results)]
lll <- as.data.frame.list(results) %>% t() %>% as.data.frame()
rownames(lll) <- NULL
View(lll)
# First, install and load the required package if you haven't already
# install.packages("readxl")
library(readxl)
install.packages("readxl")
# First, install and load the required package if you haven't already
# install.packages("readxl")
library(readxl)
# Get all sheet names from the Excel file
file.choose()
# Get all sheet names from the Excel file
file.choose()
# Get all sheet names from the Excel file
sheet_names <- excel_sheets("/Users/cristian/Desktop/CABS_2024/02_edited.xlsx")
# Create a list to store all the data frames
all_sheets <- list()
# Get all sheet names from the Excel file
sheet_names <- excel_sheets(excel_file)
# File paths
excel_file <- "/Users/cristian/Desktop/CABS_2024/02_edited.xlsx"
# Get all sheet names from the Excel file
sheet_names <- excel_sheets(excel_file)
# Create a list to store all the data frames
all_sheets <- list(excel_file)
# Create a list to store all the data frames
all_sheets <- list()
# Read each sheet into the list
for(sheet in sheet_names) {
all_sheets[[sheet]] <- read_excel(excel_file, sheet = sheet)
}
# Bind all sheets
ttt <- rbind(all_sheets)
# Bind all sheets
ttt <- bind_rows(all_sheets)
#new_row
results <- list()
nr <- c()
p <- 0
for (i in ttt$Field) {
# 01 - Field
if (i %in% abs_fields) {
print("new_row_found")
p <- 1
results <- c(results, list(nr))
nr <- c()
nr[1] <- i
next
}
# 02 - Journal
if (p == 1) {
p <- 2
nr[2] <- i
next
}
# 03 - ABS 2024
if (p == 2) {
p <- 3
nr[3] <- i
print(nr)
next
}
}
results <- results[2:length(results)]
lll <- as.data.frame.list(results) %>% t() %>% as.data.frame()
rownames(lll) <- NULL
View(lll)
colnames(lll) <- c("Field", "Journal", "AJG 2024")
# Write
write.csv(lll, file="cabs_ajg_2024.csv" row.names = FALSE)
# Write
write.csv(lll, file="cabs_ajg_2024.csv", row.names = FALSE)
?tempfile
# Settings file
# Update the settings and run the file.
# This creates directory in the GDrive bibliometrics folder and JSON file inside it
# With the directive for creating the dataset.
settings <- list()
## Dataset Metadata
settings$metadata <- list(
# Raw files path (# As downloaded in WoS, etc.)
raw_input_directory = "/Users/cristian/Library/CloudStorage/OneDrive-Personal/Documentos/imacros/downloads",
raw_input_folder_name = "Q325_ai_libsci",
# Directory path
bibliometrics_directory = "/Users/cristian/Library/CloudStorage/GoogleDrive-cristianmejia00@gmail.com/My Drive/Bibliometrics_Drive",#"C:\\Users\\crist\\OneDrive\\Documentos\\03-bibliometrics",#
project_folder = "Q325_ai_libsci",
# Analysis ID (the date + number is the label of this analysis)
date_id = "2025-01-30",#format(Sys.Date(), "%Y-%m-%d"),
# Query and data
query = 'Q325',
type_of_dataset = "papers", # "papers", "patents" or "news"
dataset_source = "wos", # wos, derwent, factiva (dimensions = wos)
# project
dataset_name = "ai_libsci",
dataset_file_name_suffix = "ai_libsci", #suffix is used for file names
dataset_description = "",
created_by = "cristianmejia00@gmail.com",
notes = "ISSI 2025"
)
## Dataset General Parameters
settings$filtering = list(
"f01" = list(
rows_filter = list(
removed_duplicated_UT = TRUE,
most_recent_year = format(Sys.Date(), "%Y")
),
columns_filter = list(
columns_selected = c("PT", "AU", "TI", "SO", "LA", "DT", "DE", "ID", "AB", "C1", "OI", "AF", "OA",
"RP", "FU", "FX", "CR", "NR", "TC", "Z9", "U1", "U2", "PU", "SN", "J9",
"JI", "PY", "VL", "IS", "BP", "EP", "AR", "DI", "PG", "WC", "SC","UT")
)
)
)
# Embed Parameters
settings$embeds <- list(
# If copute embeds
get_embeds = TRUE,
# The filtered label
from_filtered_dataset = "f01",
# Embeds parameters
"e01" = list(
# The text columns to combine to form the corpus
text_columns = c("TI", "AB"),
# Text preparation
to_lowercase = FALSE,
remove_stopwords = FALSE,
remove_numbers = FALSE,
remove_symbols = FALSE,
stemming = FALSE,
lemmatization = FALSE,
# Column to use as the ID of the embeds. It can be a concatenation of multiple columns
id_column = c("UT"),
# The huggingface ID of the embed model
transformer_model = "all-MiniLM-L6-v2",
# Comments
notes = ""
)
)
settings$network <- list(
# If compute network
get_network = TRUE,
# The filtered label
from_filtered_dataset = "f01",
# Type of network
network_type = "direct_citation", # "direct_citation", "bibliographic_coupling", "co-citation"
# notes
notes = ""
)
###############################################################################
project_folder_path <- file.path(settings$metadata$bibliometrics_directory,
settings$metadata$project_folder)
dir.create(project_folder_path, showWarnings = FALSE)
settings_file_path = file.path(settings$metadata$bibliometrics_directory,
settings$metadata$project_folder,
paste("settings_dataset_directive_",
format(Sys.time(), "%Y-%m-%d-%H-%M"),
".json",
sep = ""))
# Save readable settings
writeLines(RJSONIO::toJSON(settings, pretty=TRUE, auto_unbox=TRUE),
settings_file_path)
# Print to console
settings_file_path
