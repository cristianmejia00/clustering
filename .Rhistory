p <- p + theme_bw() + theme(legend.position = "none")
p
}
#################################################
# Aux function to map values to a desired range
# Here we use it to remap the "Value" links of the Sankeys.
map_to_range <- function(x, new_min, new_max) {
# Handle edge case where all values are the same
if (max(x, na.rm = TRUE) == min(x, na.rm = TRUE)) {
return(rep(new_min, length(x)))
}
# First normalize to 0-1 range, then scale to new range
x_std <- (x - min(x, na.rm = TRUE)) / (max(x, na.rm = TRUE) - min(x, na.rm = TRUE))
round(new_min + (new_max - new_min) * x_std, 0)
}
#################################################
# This prevents R generating unnecessary error from ggrepel
options(warn = 1)
# Heatmap
hm <- readr::read_csv(file.path(
output_folder_path,
heatmap_analysis_id, #settings$metadata$heatmap_analysis_id,
"heatmap_matrix.csv"
)) %>% as.data.frame()
rownames(hm) <- colnames(hm)
# Create a sorting vector
sort_vector <- sort(colnames(hm))
# Sort the heatmap
hm_sorted <- hm[sort_vector, sort_vector]
# Convert matrix to long format for ggplot
df_long <- hm_sorted %>% as.matrix() %>% melt()
View(df_long)
# Create heatmap
tm_hm <- ggplot(df_long, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red") +
theme_minimal() +
coord_fixed() +  # make cells square
labs(x = "", y = "", fill = "Similarity") +  # label axes
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # rotate x labels for better readability
tm_hm
# Sankey
melted <- readr::read_csv(file.path(
output_folder_path,
heatmap_analysis_id, #settings$metadata$heatmap_analysis_id,
"heatmap_melted.csv"
))
View(melted)
melted <- melted %>%
separate(Source,
remove = FALSE,
into = c("source_dataset", "source_local_cluster"),
sep = "-") %>%
separate(Target,
remove = FALSE,
into = c("target_dataset", "target_local_cluster"),
sep = "-")
View(melted)
View(inputs)
# Sankey
melted <- readr::read_csv(file.path(
output_folder_path,
heatmap_analysis_id, #settings$metadata$heatmap_analysis_id,
"heatmap_melted.csv"
))
melted$Source <- gsub("Sut", "Sust", melted$Source)
melted$Target <- gsub("Sut", "Sust", melted$Target)
melted <- melted %>%
separate(Source,
remove = FALSE,
into = c("source_dataset", "source_local_cluster"),
sep = "-") %>%
separate(Target,
remove = FALSE,
into = c("target_dataset", "target_local_cluster"),
sep = "-")
melted <- merge(melted,
inputs %>%
select(display_name, color, heatmap_display_order, sankey_display_order) %>%
rename(source_color = color,
source_heatmap_order = heatmap_display_order,
source_sankey_order = sankey_display_order),
by.x = "source_dataset",
by.y = "display_name",
all.x = TRUE,
all.y = FALSE)
melted <- merge(melted,
inputs %>%
select(display_name, color, heatmap_display_order, sankey_display_order) %>%
rename(target_color = color,
target_heatmap_order = heatmap_display_order,
target_sankey_order = sankey_display_order),
by.x = "target_dataset",
by.y = "display_name")
View(melted)
table(melted$source_dataset)
table(melted$target_dataset)
# Statistic threshold
bp <- boxplot(melted %>%
filter(source_sankey_order != target_sankey_order) %>%
pull(Similarity),
ylab = "Similarity")
bp$stats[3,1] #mean
bp$stats[4,1] #3rd quartile
settings$global$sankey_threshold #selected
sankey_threshold <- bp$stats[4,1]#settings$global$sankey_threshold
# Remove pairs in the same sankey level (they belong to same institution)
# Remove pairs in separated for more than one step
melted_filtered <- melted %>%
filter(source_sankey_order != target_sankey_order) #%>%
# Remove pairs in the same sankey level (they belong to same institution)
# Remove pairs in separated for more than one step
melted_filtered <- melted %>%
filter(source_sankey_order != target_sankey_order) %>%
#filter(abs(source_sankey_order - target_sankey_order) == 1) %>%
filter(Similarity >= sankey_threshold)
table(melted$target_dataset)
table(melted_filtered$target_dataset)
sankey_steps <- unique(inputs$sankey_display_order) %>% sort()
# Stacking the datasets to reorder them
melted_filtered$pair_index <- c(1:nrow(melted_filtered)) %>% as.character()
sources_df <- lapply(sankey_steps, \(st) {
tmp <- melted_filtered %>%
filter(source_sankey_order == st) %>%
select(Source, source_sankey_order, Similarity, pair_index) %>%
rename(cluster = Source,
step = source_sankey_order,
similarity = Similarity)
}) %>% rbind.fill()
targets_df <- lapply(sankey_steps, \(st) {
tmp <- melted_filtered %>%
filter(target_sankey_order == st) %>%
select(Target, target_sankey_order, Similarity, pair_index) %>%
rename(cluster = Target,
step = target_sankey_order,
similarity = Similarity)
}) %>% rbind.fill()
melted_listed <- rbind(sources_df, targets_df)
###############################################################################
melted_sankey <- lapply(c(0, max(sankey_steps) - 1), function(st) {
left_side <- melted_listed %>%
filter(step == st)
right_side <- melted_listed %>%
filter(step > st) # filter(step == st + 1) when strictly step by step
full_pair <- merge(left_side %>%
select(cluster, step, similarity, pair_index) %>%
rename(Source = cluster, "Step from" = step, source_similarity = similarity),
right_side %>%
select(cluster, step, similarity, pair_index) %>%
rename(Dest = cluster, "Step to" = step, dest_similarity = similarity),
by = "pair_index",
all.x = FALSE,
all.y = FALSE)
}) %>%
rbind.fill() %>%
select(all_of(c("Source", "Dest", "source_similarity", "Step from", "Step to"))) %>%
rename(Similarity = source_similarity) %>%
mutate(Value = 100,
Distance = `Step to` - `Step from`) %>%
arrange(Distance, `Step from`, desc(Similarity))
###############################################################################
melted_sankey_topics <- merge(melted_sankey,
rcs %>%
select(cluster_code, cluster_name) %>%
rename(source_topic = cluster_name),
by.x = 'Source',
by.y = 'cluster_code',
all.x = TRUE,
all.y = FALSE)
melted_sankey_topics <- merge(melted_sankey_topics,
rcs %>%
select(cluster_code, cluster_name) %>%
rename(target_topic = cluster_name),
by.x = 'Dest',
by.y = 'cluster_code',
all.x = TRUE,
all.y = FALSE)
melted_sankey_topics <- melted_sankey_topics %>%
select(all_of(c("Source", "Dest", "Value", "Step from", "Step to", "Similarity", "Distance", "source_topic", "target_topic"))) %>%
arrange(`Step from`, Source, desc(Similarity)) %>%
distinct(Source, Dest, .keep_all = TRUE) %>%
mutate(
'Value' = map_to_range(Value, 100, 10)
)
library(readr)
a318 <- read_csv("~/Library/CloudStorage/GoogleDrive-cristianmejia00@gmail.com/My Drive/Bibliometrics_Drive/Q318_human_augmentation/a01_cn__f01_dc__c01_lv/level1/cluster_summary_assessment.csv")
# load the rcc_selected of the analysis 318 human augmentation
a318$cluster_code <- paste("HA", a318$cluster_code, sep = "-")
a318$cluster_code[a318$relevant]
melted_sankey_topics2 <- melted_sankey_topics %>%
filter(Source %in% a318$cluster_code[a318$relevant]) %>%
filter(!grepl("99---", Source)) %>%
filter(!grepl("99---", Dest))
View(melted_sankey_topics2)
melted_sankey_topics2$Source <- gsub("-0---", ": ", melted_sankey_topics2$Source)
melted_sankey_topics2$Dest <- gsub("-0---", ": ", melted_sankey_topics2$Dest)
melted_sankey_topics2$Source <- gsub("---", ": ", melted_sankey_topics2$Source)
melted_sankey_topics2$Dest <- gsub("---", ": ", melted_sankey_topics2$Dest)
melted_sankey_topics2$Source <- paste(melted_sankey_topics2$Source, melted_sankey_topics2$source_topic)
melted_sankey_topics2$Dest <- paste(melted_sankey_topics2$Dest, melted_sankey_topics2$target_topic)
View(melted_sankey_topics2)
# Read the data
data <- melted_sankey_topics2 #
# Retain upto 50
data <- data %>% top_n(100, wt=Similarity)
# Remove 'others'
data<- data %>%
filter(!grepl("99---|99$", Source)) %>%
filter(!grepl("99---|99$", Dest))
# Remove dashes
data$Source <- gsub("-0---", ": ", data$Source)
data$Dest <- gsub("-0---", ": ", data$Dest)
data$Source <- gsub("---", ": ", data$Source)
data$Dest <- gsub("---", ": ", data$Dest)
# Prepare names
data$Source <- paste(data$Source, data$source_topic)
data$Dest <- paste(data$Dest, data$target_topic)
# Create nodes dataframe
# Get unique nodes from both source and destination
nodes <- unique(c(data$Source, data$Dest))
nodes_group <- sapply(nodes, \(x) {unlist(strsplit(x, "-"))[[1]]})
nodes_dn <- paste0("'", inputs$display_name, "'", collapse = ", ")
nodes_cl <- paste0("'", inputs$color, "'", collapse = ", ")
nodes_df <- data.frame(
name = nodes,
node_group = factor(nodes_group)
)
# Create links dataframe
links_df <- data.frame(
source = match(data$Source, nodes_df$name) - 1,  # 0-based indexing
target = match(data$Dest, nodes_df$name) - 1,
value = rescale(data$Similarity, to = c(10, 100)) #data$Value
)
links_df$link_group <- nodes_df[links_df$target + 1, 'node_group']
# Create custom color scale
my_color_scale <- JS(sprintf(
glue("d3.scaleOrdinal()
.domain([{nodes_dn}])
.range([{nodes_cl}])")
))
# Create Sankey diagram
sankey <- sankeyNetwork(
Links = links_df,
Nodes = nodes_df,
Source = "source",
Target = "target",
Value = "value",
NodeID = "name",
NodeGroup = "node_group",
LinkGroup = "link_group",
colourScale = my_color_scale,
#fontSize = 11,
#nodeWidth = 25,
#nodePadding = 10,
#margin = c('right'=420, 'left'=300),
#height = 600,
#width = 12000,
sinksRight = FALSE
)
# Display the Sankey in R
sankey
# Create Sankey diagram
sankey <- sankeyNetwork(
Links = links_df,
Nodes = nodes_df,
Source = "source",
Target = "target",
Value = "value",
NodeID = "name",
NodeGroup = "node_group",
LinkGroup = "link_group",
colourScale = my_color_scale,
fontSize = 11,
#nodeWidth = 25,
#nodePadding = 10,
#margin = c('right'=420, 'left'=300),
#height = 600,
#width = 12000,
sinksRight = FALSE
)
# Display the Sankey in R
sankey
melted_sankey_topics2 <- melted_sankey_topics %>%
filter(Source %in% a318$cluster_code[a318$relevant]) %>%
filter(!grepl("99---", Source)) %>%
filter(!grepl("99---", Dest))
Read the data
# Read the data
data <- melted_sankey_topics2 #
# Retain upto 50
data <- data %>% top_n(100, wt=Similarity)
# Remove 'others'
data<- data %>%
filter(!grepl("99---|99$", Source)) %>%
filter(!grepl("99---|99$", Dest))
# Remove dashes
data$Source <- gsub("-0---", ": ", data$Source)
data$Dest <- gsub("-0---", ": ", data$Dest)
data$Source <- gsub("---", ": ", data$Source)
data$Dest <- gsub("---", ": ", data$Dest)
# Prepare names
data$Source <- paste(data$Source, data$source_topic)
data$Dest <- paste(data$Dest, data$target_topic)
# Create nodes dataframe
# Get unique nodes from both source and destination
nodes <- unique(c(data$Source, data$Dest))
nodes_group <- sapply(nodes, \(x) {unlist(strsplit(x, "-"))[[1]]})
nodes_dn <- paste0("'", inputs$display_name, "'", collapse = ", ")
nodes_cl <- paste0("'", inputs$color, "'", collapse = ", ")
nodes_df <- data.frame(
name = nodes,
node_group = factor(nodes_group)
)
# Create links dataframe
links_df <- data.frame(
source = match(data$Source, nodes_df$name) - 1,  # 0-based indexing
target = match(data$Dest, nodes_df$name) - 1,
value = rescale(data$Similarity, to = c(10, 100)) #data$Value
)
links_df$link_group <- nodes_df[links_df$target + 1, 'node_group']
# Create custom color scale
my_color_scale <- JS(sprintf(
glue("d3.scaleOrdinal()
.domain([{nodes_dn}])
.range([{nodes_cl}])")
))
# Create Sankey diagram
sankey <- sankeyNetwork(
Links = links_df,
Nodes = nodes_df,
Source = "source",
Target = "target",
Value = "value",
NodeID = "name",
NodeGroup = "node_group",
LinkGroup = "link_group",
colourScale = my_color_scale,
fontSize = 11,
#nodeWidth = 25,
#nodePadding = 10,
#margin = c('right'=420, 'left'=300),
#height = 600,
#width = 12000,
sinksRight = FALSE
)
# Display the Sankey in R
sankey
# Read the data
data <- melted_sankey_topics2 #
# Retain upto 50
data <- data %>% top_n(50, wt=Similarity)
# Remove 'others'
data<- data %>%
filter(!grepl("99---|99$", Source)) %>%
filter(!grepl("99---|99$", Dest))
# Remove dashes
data$Source <- gsub("-0---", ": ", data$Source)
data$Dest <- gsub("-0---", ": ", data$Dest)
data$Source <- gsub("---", ": ", data$Source)
data$Dest <- gsub("---", ": ", data$Dest)
# Prepare names
data$Source <- paste(data$Source, data$source_topic)
data$Dest <- paste(data$Dest, data$target_topic)
# Create nodes dataframe
# Get unique nodes from both source and destination
nodes <- unique(c(data$Source, data$Dest))
nodes_group <- sapply(nodes, \(x) {unlist(strsplit(x, "-"))[[1]]})
nodes_dn <- paste0("'", inputs$display_name, "'", collapse = ", ")
nodes_cl <- paste0("'", inputs$color, "'", collapse = ", ")
nodes_df <- data.frame(
name = nodes,
node_group = factor(nodes_group)
)
# Create links dataframe
links_df <- data.frame(
source = match(data$Source, nodes_df$name) - 1,  # 0-based indexing
target = match(data$Dest, nodes_df$name) - 1,
value = rescale(data$Similarity, to = c(10, 100)) #data$Value
)
links_df$link_group <- nodes_df[links_df$target + 1, 'node_group']
# Create custom color scale
my_color_scale <- JS(sprintf(
glue("d3.scaleOrdinal()
.domain([{nodes_dn}])
.range([{nodes_cl}])")
))
# Create Sankey diagram
sankey <- sankeyNetwork(
Links = links_df,
Nodes = nodes_df,
Source = "source",
Target = "target",
Value = "value",
NodeID = "name",
NodeGroup = "node_group",
LinkGroup = "link_group",
colourScale = my_color_scale,
fontSize = 11,
#nodeWidth = 25,
#nodePadding = 10,
#margin = c('right'=420, 'left'=300),
#height = 600,
#width = 12000,
sinksRight = FALSE
)
# Display the Sankey in R
sankey
# Create Sankey diagram
sankey <- sankeyNetwork(
Links = links_df,
Nodes = nodes_df,
Source = "source",
Target = "target",
Value = "value",
NodeID = "name",
NodeGroup = "node_group",
LinkGroup = "link_group",
colourScale = my_color_scale,
fontSize = 11,
nodeWidth = 25,
#nodePadding = 10,
#margin = c('right'=420, 'left'=300),
#height = 600,
#width = 12000,
sinksRight = FALSE
)
# Display the Sankey in R
sankey
# Create Sankey diagram
sankey <- sankeyNetwork(
Links = links_df,
Nodes = nodes_df,
Source = "source",
Target = "target",
Value = "value",
NodeID = "name",
NodeGroup = "node_group",
LinkGroup = "link_group",
colourScale = my_color_scale,
fontSize = 12,
nodeWidth = 25,
#nodePadding = 10,
#margin = c('right'=420, 'left'=300),
#height = 600,
#width = 12000,
sinksRight = FALSE
)
# Display the Sankey in R
sankey
# Create Sankey diagram
sankey <- sankeyNetwork(
Links = links_df,
Nodes = nodes_df,
Source = "source",
Target = "target",
Value = "value",
NodeID = "name",
NodeGroup = "node_group",
LinkGroup = "link_group",
colourScale = my_color_scale,
fontSize = 12,
nodeWidth = 25,
#nodePadding = 10,
#margin = c('right'=420, 'left'=300),
height = 600,
width = 600,
sinksRight = FALSE
)
# Display the Sankey in R
sankey
# Create Sankey diagram
sankey <- sankeyNetwork(
Links = links_df,
Nodes = nodes_df,
Source = "source",
Target = "target",
Value = "value",
NodeID = "name",
NodeGroup = "node_group",
LinkGroup = "link_group",
colourScale = my_color_scale,
fontSize = 12,
nodeWidth = 25,
#nodePadding = 10,
#margin = c('right'=420, 'left'=300),
height = 600,
width = 1000,
sinksRight = FALSE
)
# Display the Sankey in R
sankey
# Create Sankey diagram
sankey <- sankeyNetwork(
Links = links_df,
Nodes = nodes_df,
Source = "source",
Target = "target",
Value = "value",
NodeID = "name",
NodeGroup = "node_group",
LinkGroup = "link_group",
colourScale = my_color_scale,
fontSize = 12,
nodeWidth = 25,
#nodePadding = 10,
#margin = c('right'=420, 'left'=300),
height = 600,
width = 1100,
sinksRight = FALSE
)
# Display the Sankey in R
sankey
