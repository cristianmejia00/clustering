}
# Generate the bulk text
print('get bulk text')
print(glue('Total selected papers for this cluster: {nrow(cluster_data)}'))
my_texts <- list()
for (i in c(1:min(10,nrow(cluster_data)))) {
my_texts[i] <- glue('##### {cluster_data$text[[i]]}')
}
my_texts <- paste(my_texts, collapse = ' ')
my_texts <- substr(my_texts, 1, (3500 * 4))
# Get the topic of the cluster
print('Get cluster topic')
prompt_desc <- prompt_cluster_description(topic = MAIN_TOPIC,
topic_description = MAIN_TOPIC_DESCRIPTION,
cluster_text = my_texts)
cluster_completed <- FALSE
while(!cluster_completed) {
tmp <- tryCatch({
cluster_description <- ask_claude(system_prompt = prompt_desc$system,
user_prompt = prompt_desc$user,
temperature = 0.2)
cluster_completed <- TRUE
print(cluster_description)
},
error = function(err){
message(glue('Error getting topic description of cluster {cluster}. Trying again'))
message(err)
})
}
rcs_merged$description[which(rcs_merged$cluster_code == cluster)] <- cluster_description
# Get the name of the cluster
print('Get cluster name')
cluster_completed <- FALSE
while(!cluster_completed) {
tmp <- tryCatch({
prompt <- prompt_cluster_name(topic = MAIN_TOPIC,
topic_description = MAIN_TOPIC_DESCRIPTION,
cluster_description = cluster_description)
cluster_name <- ask_claude(system_prompt = prompt$system,
user_prompt = prompt$user,
max_tokens = 60,
temperature = 0.3)
cluster_completed <- TRUE
print(cluster_name)
},
error = function(err){
message(glue('Error getting topic name of cluster {cluster}. Trying again'))
message(err)
})
}
rcs_merged$name[which(rcs_merged$cluster_code == cluster)] <- cluster_name
}
save.image(file='env20240930imcompletellm.RData')
list_of_clusters <- dataset$X_C %>% unique() %>% sort()
# We do this to keep copy of the edits in case we mess it.
rcs_merged$name2 <- gsub('^.*?"','',rcs_merged$name) %>% gsub('".$','', .) %>% gsub('"','', .)
rcs_merged$cluster_name <- rcs_merged$name2
rcs_merged$detailed_description <- rcs_merged$description
for (cluster in list_of_clusters) {
print('=================================================================')
print(glue('cluster: {cluster}'))
# Get the topic of the cluster
print('Get enhanced description')
cluster_completed <- FALSE
while(!cluster_completed) {
tmp <- tryCatch({
prompt_enh <- prompt_cluster_description_enhanced(topic = MAIN_TOPIC,
cluster_description = rcs_merged$detailed_description[rcs_merged$cluster_code == cluster])
print(prompt_enh$user)
cluster_description <- ask_gpt(system_prompt = prompt_enh$system,
user_prompt = prompt_enh$user,
model = 'claude-3-opus-20240229',
temperature = 0.1)
print(cluster_description)
cluster_completed <- TRUE
},
error = function(err){
message(glue('Error getting topic enhanced description of cluster {cluster}. Trying again'))
message(err)
})
}
rcs_merged$description[which(rcs_merged$cluster_code == cluster)] <- cluster_description
}
View(rcs_merged)
View(rcs_merged)
View(dataset)
View(rcs_merged)
#coords <- readr::read_csv("~/Library/CloudStorage/GoogleDrive-cristianmejia00@gmail.com/My Drive/PIK-RIKEN/coordinates_PIK-RIKEN_2024-09-27.csv")
coords <- readr::read_csv("G:\\My Drive\\PIK-RIKEN\\coordinates_PIK-RIKEN_2024-09-28.csv")
################################################## Dataset Part 2
dataset_pik_riken_plant <- rbind.fill(dataset_pik_riken, dataset_plant)
dataset_pik_riken_plant <- dataset_pik_riken_plant %>% filter(!duplicated(UT))
dataset <- merge(dataset_tm,
dataset_pik_riken_plant %>% select('UT', 'TI', 'AB', 'Z9', 'SO', 'WC'),
by = 'UT',
all.x = TRUE,
all.y = FALSE)
################################################## Summary
summary_rcs <- dataset %>%
group_by(X_C_label) %>%
summarize(
'ave_Z9' = mean(Z9, na.rm = TRUE),
'ave_PY' = mean(PY, na.rm = TRUE)
)
################################################## Cluster correspondance
cluster_names <- dataset[,c('X_C', 'X_C_label')] %>%
filter(!duplicated(X_C)) %>%
arrange(X_C)
################################################## RCS
rcs_merged$cluster_name <- cluster_names$X_C_label[match(rcs_merged$Topic, cluster_names$X_C)]
rcs_merged$cluster_code <- rcs_merged$cluster_name
# cluster idx within institution
rcs_merged$idx <- sapply(rcs_merged$cluster_name, function(x) {
ttt <- strsplit(x, '-')
return(as.numeric(ttt[[1]][2]))
})
rcs_merged$Name0 <- substr(rcs_merged$Name, 1, 7)
rcs_merged$Name2 <- sapply(c(1:nrow(rcs_merged)), function(x) {
ttt <- strsplit(rcs_merged$Name[[x]], '_')
ttt <- paste(ttt[[1]][-1], collapse = '_')
print(ttt)
tmp <- paste(as.character(rcs_merged$idx[[x]]), ttt, sep = ":")
print(tmp)
return(tmp)
})
rcs_merged$Name2 <- gsub('_fecal', '',rcs_merged$Name2)
rcs_merged <- merge(rcs_merged,
summary_rcs,
by.x = 'cluster_code',
by.y = 'X_C_label')
coords <- coords %>% rename(c('Name0' = 'label'))
coords$Name0 <- substr(coords$Name0, 1, 7)
rcs_merged$Name0[!rcs_merged$Name0 %in% coords$Name0]
View(rcs_merged)
list_of_clusters <- dataset$X_C %>% unique() %>% sort()
list_of_clusters <- list_of_clusters[grepl('Plant', list_of_clusters)]
list_of_clusters <- dataset$X_C %>% unique() %>% sort()
dataset$X_C <- dataset$X_C_label
list_of_clusters <- dataset$X_C %>% unique() %>% sort()
list_of_clusters <- list_of_clusters[grepl('Plant', list_of_clusters)]
# Compute summaries
COMPUTE_SUMMARIES = TRUE
for (cluster in list_of_clusters) {
if (COMPUTE_SUMMARIES) {
# Get this cluster tops
print('=================================================================')
print(glue('cluster: {cluster}'))
cluster_data <- get_cluster_data(dataset, cluster_ = cluster, top = 3)
print(cluster_data$X_C)
# Summarize each of the selected papers
cluster_data <- get_papers_summary(cluster_data)
# Assign the summaries to the main dataset
print('asign summaries to main dataset')
dataset$summary[match(cluster_data$UT, dataset$UT)] <- cluster_data$summary
} else {
cluster_data <- dataset %>% filter(X_C == cluster, summary != '')
cluster_data$text <- paste(cluster_data$TI, cluster_data$AB, sep = ' ')
}
# Generate the bulk text
print('get bulk text')
print(glue('Total selected papers for this cluster: {nrow(cluster_data)}'))
my_texts <- list()
for (i in c(1:min(10,nrow(cluster_data)))) {
my_texts[i] <- glue('##### {cluster_data$text[[i]]}')
}
my_texts <- paste(my_texts, collapse = ' ')
my_texts <- substr(my_texts, 1, (3500 * 4))
# Get the topic of the cluster
print('Get cluster topic')
prompt_desc <- prompt_cluster_description(topic = MAIN_TOPIC,
topic_description = MAIN_TOPIC_DESCRIPTION,
cluster_text = my_texts)
cluster_completed <- FALSE
while(!cluster_completed) {
tmp <- tryCatch({
cluster_description <- ask_gpt(system_prompt = prompt_desc$system,
user_prompt = prompt_desc$user,
temperature = 0.2)
cluster_completed <- TRUE
print(cluster_description)
},
error = function(err){
message(glue('Error getting topic description of cluster {cluster}. Trying again'))
message(err)
})
}
rcs_merged$description[which(rcs_merged$cluster_code == cluster)] <- cluster_description
# Get the name of the cluster
print('Get cluster name')
cluster_completed <- FALSE
while(!cluster_completed) {
tmp <- tryCatch({
prompt <- prompt_cluster_name(topic = MAIN_TOPIC,
topic_description = MAIN_TOPIC_DESCRIPTION,
cluster_description = cluster_description)
cluster_name <- ask_gpt(system_prompt = prompt$system,
user_prompt = prompt$user,
max_tokens = 60,
temperature = 0.3)
cluster_completed <- TRUE
print(cluster_name)
},
error = function(err){
message(glue('Error getting topic name of cluster {cluster}. Trying again'))
message(err)
})
}
rcs_merged$name[which(rcs_merged$cluster_code == cluster)] <- cluster_name
}
###################################
###################################
# Initialize
###################################
#rcs_merged <- rcs
rcs_merged$description <- ''
rcs_merged$name <- ''
dataset$summary <- ''
for (cluster in list_of_clusters) {
if (COMPUTE_SUMMARIES) {
# Get this cluster tops
print('=================================================================')
print(glue('cluster: {cluster}'))
cluster_data <- get_cluster_data(dataset, cluster_ = cluster, top = 3)
print(cluster_data$X_C)
# Summarize each of the selected papers
cluster_data <- get_papers_summary(cluster_data)
# Assign the summaries to the main dataset
print('asign summaries to main dataset')
dataset$summary[match(cluster_data$UT, dataset$UT)] <- cluster_data$summary
} else {
cluster_data <- dataset %>% filter(X_C == cluster, summary != '')
cluster_data$text <- paste(cluster_data$TI, cluster_data$AB, sep = ' ')
}
# Generate the bulk text
print('get bulk text')
print(glue('Total selected papers for this cluster: {nrow(cluster_data)}'))
my_texts <- list()
for (i in c(1:min(10,nrow(cluster_data)))) {
my_texts[i] <- glue('##### {cluster_data$text[[i]]}')
}
my_texts <- paste(my_texts, collapse = ' ')
my_texts <- substr(my_texts, 1, (3500 * 4))
# Get the topic of the cluster
print('Get cluster topic')
prompt_desc <- prompt_cluster_description(topic = MAIN_TOPIC,
topic_description = MAIN_TOPIC_DESCRIPTION,
cluster_text = my_texts)
cluster_completed <- FALSE
while(!cluster_completed) {
tmp <- tryCatch({
cluster_description <- ask_gpt(system_prompt = prompt_desc$system,
user_prompt = prompt_desc$user,
temperature = 0.2)
cluster_completed <- TRUE
print(cluster_description)
},
error = function(err){
message(glue('Error getting topic description of cluster {cluster}. Trying again'))
message(err)
})
}
rcs_merged$description[which(rcs_merged$cluster_code == cluster)] <- cluster_description
# Get the name of the cluster
print('Get cluster name')
cluster_completed <- FALSE
while(!cluster_completed) {
tmp <- tryCatch({
prompt <- prompt_cluster_name(topic = MAIN_TOPIC,
topic_description = MAIN_TOPIC_DESCRIPTION,
cluster_description = cluster_description)
cluster_name <- ask_gpt(system_prompt = prompt$system,
user_prompt = prompt$user,
max_tokens = 60,
temperature = 0.3)
cluster_completed <- TRUE
print(cluster_name)
},
error = function(err){
message(glue('Error getting topic name of cluster {cluster}. Trying again'))
message(err)
})
}
rcs_merged$name[which(rcs_merged$cluster_code == cluster)] <- cluster_name
}
save.image("C:/Users/crist/Desktop/GitHub/clustering/env20240928_plant_llm_names.RData")
View(rcs_merged)
# We do this to keep copy of the edits in case we mess it.
rcs_merged$name2 <- gsub('^.*?"','',rcs_merged$name) %>% gsub('".$','', .) %>% gsub('"','', .)
rcs_merged$cluster_name <- rcs_merged$name2
rcs_merged$detailed_description <- rcs_merged$description
for (cluster in list_of_clusters) {
print('=================================================================')
print(glue('cluster: {cluster}'))
# Get the topic of the cluster
print('Get enhanced description')
cluster_completed <- FALSE
while(!cluster_completed) {
tmp <- tryCatch({
prompt_enh <- prompt_cluster_description_enhanced(topic = MAIN_TOPIC,
cluster_description = rcs_merged$detailed_description[rcs_merged$cluster_code == cluster])
print(prompt_enh$user)
cluster_description <- ask_gpt(system_prompt = prompt_enh$system,
user_prompt = prompt_enh$user,
model = 'claude-3-opus-20240229',
temperature = 0.1)
print(cluster_description)
cluster_completed <- TRUE
},
error = function(err){
message(glue('Error getting topic enhanced description of cluster {cluster}. Trying again'))
message(err)
})
}
rcs_merged$description[which(rcs_merged$cluster_code == cluster)] <- cluster_description
}
for (cluster in list_of_clusters) {
print('=================================================================')
print(glue('cluster: {cluster}'))
# Get the topic of the cluster
print('Get enhanced description')
cluster_completed <- FALSE
while(!cluster_completed) {
tmp <- tryCatch({
prompt_enh <- prompt_cluster_description_enhanced(topic = MAIN_TOPIC,
cluster_description = rcs_merged$detailed_description[rcs_merged$cluster_code == cluster])
print(prompt_enh$user)
cluster_description <- ask_gpt(system_prompt = prompt_enh$system,
user_prompt = prompt_enh$user,
#model = 'claude-3-opus-20240229',
temperature = 0.1)
print(cluster_description)
cluster_completed <- TRUE
},
error = function(err){
message(glue('Error getting topic enhanced description of cluster {cluster}. Trying again'))
message(err)
})
}
rcs_merged$description[which(rcs_merged$cluster_code == cluster)] <- cluster_description
}
write.csv(rcs_merged %>%
filter(grepl('Plant', cluster_code)) %>%
select(cluster_code, cluster_name, description, detailed_description),
file.path("rcs_names_Plant_llm.csv"),
row.names = FALSE)
save.image("C:/Users/crist/Desktop/GitHub/clustering/env20240928_plant_llm_names.RData")
