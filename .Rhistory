###############################################################################
# Load raw dataset
# Citation network assets
if (settings$params$type_of_analysis %in% c("citation_network")) {
dataset <- readr::read_csv(file.path(
settings$metadata$bibliometrics_folder,
settings$metadata$project_folder,
settings$metadata$analysis_id,
"dataset_comp.csv"
))
# Load the clustering solution once thresholded
dataset_minimal <- readr::read_csv(file.path(
settings$metadata$bibliometrics_folder,
settings$metadata$project_folder,
settings$metadata$analysis_id,
settings$cno$clustering$algorithm,
settings$cno$thresholding$threshold %>% as.character(),
"dataset_minimal.csv"
))
}
# Topic Model
if (settings$params$type_of_analysis %in% c("topic_model", "both")) {
dataset <- readr::read_csv(file.path(
settings$metadata$bibliometrics_folder,
settings$metadata$project_folder,
settings$metadata$filtered_folder,
"dataset_raw_cleaned.csv"
))
# Load the clustering solution once thresholded
dataset_minimal <- readr::read_csv(file.path(
settings$metadata$bibliometrics_folder,
settings$metadata$project_folder,
settings$metadata$analysis_id,
"dataset_minimal.csv"
))
}
# Ensure we have all the papers in the network
dataset_minimal$uuid <- dataset$uuid[match(dataset_minimal$UT, dataset$UT)]
stopifnot(all(dataset_minimal$uuid %in% dataset$uuid))
# Merge them
dataset <- merge(
dataset_minimal %>%
select(all_of(c(
"uuid",
setdiff(
colnames(dataset_minimal),
colnames(dataset)
)
))),
dataset,
by = "uuid",
all.x = TRUE,
all.y = TRUE
)
# Verify the data is correctly formatted for reports
source(file.path(getwd(), "zz_utils", "00_verify_data.R"))
zz_env <- list("x01" = ls())
###############################################################################
###############################################################################
###############################################################################
# Reporting clusters
source(file.path(
getwd(),
"02_citation_network",
"01_execute_and_reports.R"
))
###############################################################################
###############################################################################
###############################################################################
# Save code snapshot
files_to_save <- list.files(getwd(), full.names = TRUE, recursive = TRUE, pattern = "*\\.R$|*\\.r$")
files_to_omit <- list.files(file.path(getwd(), "renv", "library"), full.names = TRUE, recursive = TRUE, pattern = "*\\.R$|*\\.r$")
files_to_save <- setdiff(files_to_save, files_to_omit)
# Not to zip Rdata environments as they are heavy and saved separately
files_to_save <- files_to_save[!grepl("rdata$", tolower(files_to_save))]
# Zip them. This needs Rtools to work
zip(
zipfile = file.path(output_folder_level, "source_code"),
files = files_to_save
)
# Save package list
session_info <- sessionInfo()
save(session_info, file = file.path(output_folder_level, "sessionInfo.rdata"))
writeLines(capture.output(sessionInfo()), file.path(output_folder_level, "sessionInfo.txt"))
# # Save Global environment
# save.image(file.path(output_folder_level, "environ_zz_reports.rdata"))
#
# # Save cluster IDS
# if ('fukan_original_cluster_id' %in% colnames(dataset)) {
#   print('Saving cluster id comparison for subclusters')
#   cluster_comparison <- dataset[c('X_C', 'fukan_X_C', 'fukan_original_cluster_id', 'fukan_subcluster_label')]
#   cluster_comparison <- cluster_comparison[!duplicated(cluster_comparison$fukan_subcluster_label),]
#   cluster_comparison <- cluster_comparison[order(cluster_comparison$fukan_X_C),]
#   write.csv(cluster_comparison, file = file.path(output_folder_level, "cluster_id_comparison.csv"), row.names = FALSE)
# }
# ###############################################
# # LLM
# # Using OpenAI and Claude in R.
# source("05_llm/zz-llm_v2_0_prompts.R")
# source("05_llm/zz-llm_v2_1_functions.R")
# source("05_llm/zz-llm_v2_2_execution.R")
#
# source("06_quarto/zz-create_bib_file.R")
#
# source("06_quarto/zz-generate_quarto_document.R")
# #source("06_quarto/zz-generate_quarto_word.R")
#
# ###############################################
# # Send to display
# source("zzz-send_to_display_repo.R")
#
# # Save Global environment
# save.image(file.path(output_folder_level, "environ_zzz_llm.rdata"))
#==============================================================================
# Load settings
source("_3_entry_analysis.R")
###############################################################################
# Read input files
analysis_folder_path <- file.path(settings$metadata$bibliometrics_folder,
settings$metadata$project_folder,
settings$metadata$analysis_id)
network <- readr::read_csv(file.path(analysis_folder_path, "network_comp.csv"))
dataset_minimal <- readr::read_csv(file.path(analysis_folder_path,
settings$cno$clustering$algorithm,
"dataset_clustered.csv"))
# Create network object
if (!settings$cno$using_mission_pairs_from_fukan) {
print("Loading computed network")
g1 <- graph_from_data_frame(network, directed = TRUE)
} else {
# The network object is based on "mission.pairs.tsv" from Fukan's results
print("Graph from mission pairs")
g1 <- read.graph(network, format = "ncol")
}
# Verification
stopifnot(
all(dataset_minimal$X_N == V(g1)$name)
)
###############################################################################
###############################################################################
###############################################################################
source("02_citation_network/03_recursive_clustering_WOS.R")
# Write the edges counts
write.csv(edges_level1,
file = file.path(results_folder_path, "level0_edges_count.csv"),
row.names = TRUE)
###############################################################################
###############################################################################
###############################################################################
# Save the file
# From the pov of this very code, this is actually the output folder. Where the files generated by this code will be placed.
results_folder_path <- file.path(settings$metadata$bibliometrics_folder,
settings$metadata$project_folder,
settings$metadata$analysis_id,
settings$cno$clustering$algorithm,
settings$cno$thresholding$threshold %>% as.character())
dir.create(results_folder_path, showWarnings = FALSE)
# Write the edges counts
write.csv(edges_level1,
file = file.path(results_folder_path, "level0_edges_count.csv"),
row.names = TRUE)
if (settings$params$recursive_level >= 1) {
write.csv(edges_level2,
file = file.path(results_folder_path, "level1_edges_count.csv"),
row.names = TRUE)
}
g1$V[name]
V(g1)["name"]
V(g1)$['names']
V(g1)['names']
V(g)$name
V(g1)$name
dataset_minimal$subcluster_label1[1:0]
dataset_minimal$level1[1:10]
dataset_minimal$level0[1:10]
tmp <- dataset %>%
filter(subclusters_label1) %>%
pull("X_N")
tmp <- dataset_minal %>%
filter(subclusters_label1) %>%
pull("X_N")
tmp <- dataset_minimal %>%
filter(subclusters_label1) %>%
pull("X_N")
tmp <- dataset_minimal %>%
filter(subclusters_label1 == "6-3---") %>%
pull("X_N")
tmp <- dataset_minimal %>%
filter(subcluster_label1 == "6-3---") %>%
pull("X_N")
tmp <- dataset_minimal %>%
filter(subcluster_label1 == "6-3---") %>%
pull("X_N") %>%
as.character()
?which
which(V(g1)$name %in% tmp)
tg1 <- subgraph(g1, this_vertices)
this_vertices <- which(V(g1)$name %in% tmp)
tg1 <- subgraph(g1, this_vertices)
ecount(tg1)
cluster_list <- unique(dataset_minimal$subcluster_label1)
summary_list <- list()
for (i in cluster_list) {
tmp <- dataset_minimal %>%
filter(subcluster_label1 == i) %>%
pull("X_N") %>%
as.character()
this_vertices <- which(V(g1)$name %in% tmp)
tg1 <- subgraph(g1, this_vertices)
this_edges <- ecount(tg1)
this_summary <- data.frame(
'cluster_code' = 1,
'egdes' = this_edges,
)
summary_list <- append(summary_list, this_summary)
}
summary_list <- list()
for (i in cluster_list) {
tmp <- dataset_minimal %>%
filter(subcluster_label1 == i) %>%
pull("X_N") %>%
as.character()
this_vertices <- which(V(g1)$name %in% tmp)
tg1 <- subgraph(g1, this_vertices)
this_edges <- ecount(tg1)
this_summary <- data.frame(
'cluster_code' = 1,
'egdes' = this_edges
)
summary_list <- append(summary_list, this_summary)
}
summary_df <- rbind(summary_list)
View(summary_df)
summary_df <- cbind(summary_list)
View(summary_df)
for (i in cluster_list) {
tmp <- dataset_minimal %>%
filter(subcluster_label1 == i) %>%
pull("X_N") %>%
as.character()
this_vertices <- which(V(g1)$name %in% tmp)
tg1 <- subgraph(g1, this_vertices)
this_edges <- ecount(tg1)
this_summary <- data.frame(
'cluster_code' = 1,
'egdes' = this_edges
)
summary_list <- list.append(summary_list, this_summary)
}
for (i in cluster_list) {
tmp <- dataset_minimal %>%
filter(subcluster_label1 == i) %>%
pull("X_N") %>%
as.character()
this_vertices <- which(V(g1)$name %in% tmp)
tg1 <- subgraph(g1, this_vertices)
this_edges <- ecount(tg1)
this_summary <- data.frame(
'cluster_code' = i,
'egdes' = this_edges
)
summary_list <- append(summary_list, list(this_summary))
}
summary_df <- rbind(summary_list)
summary_list <- list()
for (i in cluster_list) {
tmp <- dataset_minimal %>%
filter(subcluster_label1 == i) %>%
pull("X_N") %>%
as.character()
this_vertices <- which(V(g1)$name %in% tmp)
tg1 <- subgraph(g1, this_vertices)
this_edges <- ecount(tg1)
this_summary <- data.frame(
'cluster_code' = i,
'egdes' = this_edges
)
summary_list <- append(summary_list, list(this_summary))
}
summary_df <- rbind(summary_list)
summary_df <- rbind(summary_list %>% unlist())
summary_df <- rbindlist(summary_list)
View(summary_df)
for (i in cluster_list) {
sections <- strsplit(i, "-")
tmp <- dataset_minimal %>%
filter(subcluster_label1 == i) %>%
pull("X_N") %>%
as.character()
this_vertices <- which(V(g1)$name %in% tmp)
tg1 <- subgraph(g1, this_vertices)
this_edges <- ecount(tg1)
this_summary <- data.frame(
'cluster_code' = i,
'main_code' = i[[1]],
'subcluster' = i[[2]],
'egdes' = this_edges
)
summary_list <- append(summary_list, list(this_summary))
}
for (i in cluster_list) {
sections <- strsplit(i, "-")
tmp <- dataset_minimal %>%
filter(subcluster_label1 == i) %>%
pull("X_N") %>%
as.character()
this_vertices <- which(V(g1)$name %in% tmp)
tg1 <- subgraph(g1, this_vertices)
this_edges <- ecount(tg1)
this_summary <- data.frame(
'cluster_code' = i,
'main_code' = sections[[1]],
'subcluster' = sections[[2]],
'egdes' = this_edges
)
summary_list <- append(summary_list, list(this_summary))
}
summary_df <- rbindlist(summary_list)
summary_list <- list()
for (i in cluster_list) {
sections <- strsplit(i, "-")
tmp <- dataset_minimal %>%
filter(subcluster_label1 == i) %>%
pull("X_N") %>%
as.character()
this_vertices <- which(V(g1)$name %in% tmp)
tg1 <- subgraph(g1, this_vertices)
this_edges <- ecount(tg1)
this_summary <- data.frame(
'cluster_code' = i,
'main_code' = sections[[1]],
'subcluster' = sections[[2]],
'egdes' = this_edges
)
summary_list <- append(summary_list, list(this_summary))
}
summary_df <- rbindlist(summary_list)
summary_list <- list()
for (i in cluster_list) {
sections <- strsplit(i, "-")
tmp <- dataset_minimal %>%
filter(subcluster_label1 == i) %>%
pull("X_N") %>%
as.character()
this_vertices <- which(V(g1)$name %in% tmp)
tg1 <- subgraph(g1, this_vertices)
this_edges <- ecount(tg1)
this_summary <- data.frame(
'cluster_code' = i,
'main_code' = sections[[1]],
'subcluster' = sections[[2]],
'egdes' = this_edges
)
summary_list <- append(summary_list, list(this_summary))
}
summary_list <- list()
for (i in cluster_list) {
sections <- strsplit(i, "-")
tmp <- dataset_minimal %>%
filter(subcluster_label1 == i) %>%
pull("X_N") %>%
as.character()
this_vertices <- which(V(g1)$name %in% tmp)
tg1 <- subgraph(g1, this_vertices)
this_edges <- ecount(tg1)
this_summary <- data.frame(
'cluster_code' = i,
'main_code' = sections[1],
'subcluster' = sections[2],
'egdes' = this_edges
)
summary_list <- append(summary_list, list(this_summary))
}
summary_list <- list()
for (i in cluster_list) {
sections <- strsplit(i, "-")
tmp <- dataset_minimal %>%
filter(subcluster_label1 == i) %>%
pull("X_N") %>%
as.character()
this_vertices <- which(V(g1)$name %in% tmp)
tg1 <- subgraph(g1, this_vertices)
this_edges <- ecount(tg1)
this_summary <- data.frame(
'cluster_code' = i,
'main_code' = sections[[1]][1],
'subcluster' = sections[[1]][2],
'egdes' = this_edges
)
summary_list <- append(summary_list, list(this_summary))
}
summary_df <- rbindlist(summary_list)
View(summary_df)
summary_list <- list()
for (i in cluster_list) {
sections <- strsplit(i, "-")
tmp <- dataset_minimal %>%
filter(subcluster_label1 == i) %>%
pull("X_N") %>%
as.character()
this_vertices <- which(V(g1)$name %in% tmp)
tg1 <- subgraph(g1, this_vertices)
this_edges <- ecount(tg1)
this_summary <- data.frame(
'cluster_code' = i,
'main_code' = sections[[1]][1] %>% as.numeric(),
'subcluster' = sections[[1]][2] %>% as.numeric(),
'egdes' = this_edges
)
summary_list <- append(summary_list, list(this_summary))
}
for (i in cluster_list) {
sections <- strsplit(i, "-")
tmp <- dataset_minimal %>%
filter(subcluster_label1 == i) %>%
pull("X_N") %>%
as.character()
this_vertices <- which(V(g1)$name %in% tmp)
tg1 <- subgraph(g1, this_vertices)
this_edges <- ecount(tg1)
this_summary <- data.frame(
'cluster_code' = i,
'main_cluster' = sections[[1]][1] %>% as.numeric(),
'subcluster' = sections[[1]][2] %>% as.numeric(),
'egdes' = this_edges
)
summary_list <- append(summary_list, list(this_summary))
}
summary_list <- list()
for (i in cluster_list) {
sections <- strsplit(i, "-")
tmp <- dataset_minimal %>%
filter(subcluster_label1 == i) %>%
pull("X_N") %>%
as.character()
this_vertices <- which(V(g1)$name %in% tmp)
tg1 <- subgraph(g1, this_vertices)
this_edges <- ecount(tg1)
this_summary <- data.frame(
'cluster_code' = i,
'main_cluster' = sections[[1]][1] %>% as.numeric(),
'subcluster' = sections[[1]][2] %>% as.numeric(),
'egdes' = this_edges
)
summary_list <- append(summary_list, list(this_summary))
}
summary_df <- rbindlist(summary_list) %>%
arrange(desc(subcluster), desc(main_cluster))
View(summary_df)
summary_df <- rbindlist(summary_list) %>%
arrange(subcluster, main_cluster)
View(summary_df)
summary_df <- rbindlist(summary_list) %>%
arrange(main_cluster, subcluster)
View(summary_df)
write.csv('level1_edges.csv')
write.csv(summary_df, 'level1_edges.csv', row.names = FALSE)
load("~/Library/CloudStorage/GoogleDrive-cristianmejia00@gmail.com/My Drive/Bibliometrics_Drive/Q322_TS_robot_2022_2024/a01_cn__f01_dc__c01_lv/level1/environ.rdata")
# Select the list of clusters
cluster_list <- unique(dataset_minimal$subcluster_label1)
# Compute the edges
summary_list <- list()
for (i in cluster_list) {
sections <- strsplit(i, "-")
tmp <- dataset_minimal %>%
filter(subcluster_label1 == i) %>%
pull("X_N") %>%
as.character()
this_vertices <- which(V(g1)$name %in% tmp)
tg1 <- subgraph(g1, this_vertices)
this_edges <- ecount(tg1)
this_summary <- data.frame(
'cluster_code' = i,
'main_cluster' = sections[[1]][1] %>% as.numeric(),
'subcluster' = sections[[1]][2] %>% as.numeric(),
'egdes' = this_edges
)
summary_list <- append(summary_list, list(this_summary))
}
# Get the edges from a solution file.
# We need the dataset_minimal and g1 objects
network <- readr::read_csv(file.path(analysis_folder_path, "network_comp.csv"))
# Read input files
analysis_folder_path <- file.path(settings$metadata$bibliometrics_folder,
settings$metadata$project_folder,
settings$metadata$analysis_id)
network <- readr::read_csv(file.path(analysis_folder_path, "network_comp.csv"))
g1 <- graph_from_data_frame(network, directed = TRUE)
# Select the list of clusters
cluster_list <- unique(dataset_minimal$subcluster_label1)
# Compute the edges
summary_list <- list()
for (i in cluster_list) {
sections <- strsplit(i, "-")
tmp <- dataset_minimal %>%
filter(subcluster_label1 == i) %>%
pull("X_N") %>%
as.character()
this_vertices <- which(V(g1)$name %in% tmp)
tg1 <- subgraph(g1, this_vertices)
this_edges <- ecount(tg1)
this_summary <- data.frame(
'cluster_code' = i,
'main_cluster' = sections[[1]][1] %>% as.numeric(),
'subcluster' = sections[[1]][2] %>% as.numeric(),
'egdes' = this_edges
)
summary_list <- append(summary_list, list(this_summary))
}
summary_df <- rbindlist(summary_list) %>%
arrange(main_cluster, subcluster)
write.csv(summary_df, 'level1_edges.csv', row.names = FALSE)
