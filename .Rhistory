category_column,
value_label = value_column,
category_label = category_column) {
# Get mean and median for sorting
compound_mean <- tapply(dataset[[value_column]], dataset[[category_column]], mean, na.rm = TRUE)
compound_median <- tapply(dataset[[value_column]], dataset[[category_column]], median, na.rm = TRUE)
# Prepare df
long <- dataset[, c(category_column, value_column)]
setnames(long, c(category_column, value_column), c("category", "values"))
long$category <- as.character(long$category)
long$category <- factor(long$category, levels = as.character(order(compound_median, compound_mean)))
long$main_cluster <- strsplit(as.character(long$category), "-")
long$main_cluster <- sapply(long$main_cluster, function(x) {x[[1]]})
bp <- ggplot(long, aes(x = category, y = values)) +
geom_boxplot(
width = 0.7,
fill = main_cluster
) +
xlab(category_label) +
ylab(value_label)
# bp + coord_flip()
K <- length(unique(dataset[[category_column]]))
if (K > 20) {
bp <- bp + theme(axis.text.x = element_text(size = 6, angle = 90, vjust = 0.5, hjust = 1))
}
bp + scale_color_manual(values = default_palette)  + theme_bw()
}
# Plot
for (i in numerical_reports) {
plot_boxplots(dataset,
value_column = i,
category_column = "X_C",
value_label = column_labels[i],
category_label = "Clusters")
ggsave(file.path(output_folder_level, subfolder_clusters, glue("fig_clusters_{i}_boxplot.{extension}")))
}
plot_boxplots(dataset,
value_column = 'PY',
category_column = "X_C",
value_label = column_labels['PY'],
category_label = "Clusters")
# UTILS
#' param value_column: the dataset column with numerical values to summarize (e.g. PY, Z9, sentiment, score)
#' param category_column: the dataset column with single categorical items (e.g. X_C, SO, PY)
#' param value_label: the label to use in the x axis
#' param category_label: the label to use in the y axis
#' return a ggplot
plot_boxplots <- function(dataset,
value_column,
category_column,
value_label = value_column,
category_label = category_column) {
# Get mean and median for sorting
compound_mean <- tapply(dataset[[value_column]], dataset[[category_column]], mean, na.rm = TRUE)
compound_median <- tapply(dataset[[value_column]], dataset[[category_column]], median, na.rm = TRUE)
# Prepare df
long <- dataset[, c(category_column, value_column)]
setnames(long, c(category_column, value_column), c("category", "values"))
long$category <- as.character(long$category)
long$category <- factor(long$category, levels = as.character(order(compound_median, compound_mean)))
long$main_cluster <- strsplit(as.character(long$category), "-")
long$main_cluster <- sapply(long$main_cluster, function(x) {x[[1]]})
print(long$main_cluster)
bp <- ggplot(long, aes(x = category, y = values)) +
geom_boxplot(
width = 0.7,
fill = main_cluster
) +
xlab(category_label) +
ylab(value_label)
# bp + coord_flip()
K <- length(unique(dataset[[category_column]]))
if (K > 20) {
bp <- bp + theme(axis.text.x = element_text(size = 6, angle = 90, vjust = 0.5, hjust = 1))
}
bp + scale_color_manual(values = default_palette)  + theme_bw()
}
# Plot
for (i in numerical_reports) {
plot_boxplots(dataset,
value_column = i,
category_column = "X_C",
value_label = column_labels[i],
category_label = "Clusters")
ggsave(file.path(output_folder_level, subfolder_clusters, glue("fig_clusters_{i}_boxplot.{extension}")))
}
value_column <- "PY"
category_column <- "X_C"
value_label <- value_column
category_label <- category_column
# Get mean and median for sorting
compound_mean <- tapply(dataset[[value_column]], dataset[[category_column]], mean, na.rm = TRUE)
compound_median <- tapply(dataset[[value_column]], dataset[[category_column]], median, na.rm = TRUE)
compound_mean
# Prepare df
long <- dataset[, c(category_column, value_column)]
setnames(long, c(category_column, value_column), c("category", "values"))
long$category <- as.character(long$category)
long$category <- factor(long$category, levels = as.character(order(compound_median, compound_mean)))
View(long)
# Prepare df
long <- dataset[, c(category_column, value_column)]
View(long)
setnames(long, c(category_column, value_column), c("category", "values"))
long$category <- as.character(long$category)
View(long)
compound_mean
long$category <- as.character(long$category)
long$category <- factor(long$category, levels = as.character(rcs_merged$cluster_code[order(compound_median, compound_mean)]))
View(long)
View(long)
long$main_cluster <- strsplit(as.character(long$category), "-")
long$main_cluster <- sapply(long$main_cluster, function(x) {x[[1]]})
View(long)
print(long$main_cluster)
bp <- ggplot(long, aes(x = category, y = values)) +
geom_boxplot(
width = 0.7,
fill = main_cluster
) +
xlab(category_label) +
ylab(value_label)
# bp + coord_flip()
K <- length(unique(dataset[[category_column]]))
if (K > 20) {
bp <- bp + theme(axis.text.x = element_text(size = 6, angle = 90, vjust = 0.5, hjust = 1))
}
bp + scale_color_manual(values = default_palette)  + theme_bw()
class(long$main_cluster)
bp <- ggplot(long, aes(x = category, y = values, fill = main_cluster)) +
geom_boxplot(
width = 0.7
) +
xlab(category_label) +
ylab(value_label)
# bp + coord_flip()
K <- length(unique(dataset[[category_column]]))
if (K > 20) {
bp <- bp + theme(axis.text.x = element_text(size = 6, angle = 90, vjust = 0.5, hjust = 1))
}
bp + scale_color_manual(values = default_palette)  + theme_bw()
bp <- ggplot(long, aes(x = category, y = values, fill = as.numeric(main_cluster))) +
geom_boxplot(
width = 0.7
) +
xlab(category_label) +
ylab(value_label)
# bp + coord_flip()
K <- length(unique(dataset[[category_column]]))
if (K > 20) {
bp <- bp + theme(axis.text.x = element_text(size = 6, angle = 90, vjust = 0.5, hjust = 1))
}
bp + scale_color_manual(values = default_palette)  + theme_bw()
bp <- ggplot(long, aes(x = category, y = values, fill = main_cluster)) +
geom_boxplot(
width = 0.7
) +
xlab(category_label) +
ylab(value_label)
# bp + coord_flip()
K <- length(unique(dataset[[category_column]]))
bp + scale_color_manual(values = default_palette)  + theme_bw()
if (K > 20) {
bp <- bp + theme(axis.text.x = element_text(size = 6, angle = 90, vjust = 0.5, hjust = 1))
}
bp + scale_fill_manual(values = default_palette)  + theme_bw()
bp <- ggplot(long, aes(x = category, y = values, fill = main_cluster)) +
geom_boxplot(
width = 0.7
) +
xlab(gsub("---|-0", "", category_label)) +
ylab(value_label)
# bp + coord_flip()
K <- length(unique(dataset[[category_column]]))
if (K > 20) {
bp <- bp + theme(axis.text.x = element_text(size = 6, angle = 90, vjust = 0.5, hjust = 1))
}
bp + scale_fill_manual(values = default_palette)  + theme_bw()
# Prepare df
long <- dataset[, c(category_column, value_column)]
setnames(long, c(category_column, value_column), c("category", "values"))
long$category <- gsub("---|-0", "", as.character(long$category))
long$category <- factor(long$category, levels = as.character(rcs_merged$cluster_code[order(compound_median, compound_mean)]))
long$main_cluster <- strsplit(as.character(long$category), "-")
long$main_cluster <- sapply(long$main_cluster, function(x) {x[[1]]})
print(long$main_cluster)
# Prepare df
long <- dataset[, c(category_column, value_column)]
setnames(long, c(category_column, value_column), c("category", "values"))
long$category <- gsub("---|-0", "", as.character(long$category))
View(long)
?factor
long$category <- factor(long$category,
levels = as.character(rcs_merged$cluster_code[order(compound_median, compound_mean)]),
labels = gsub("---|-0", "", levels))
labels(long$category) <- gsub("---|-0", "", levels(long$category))
levels(long$category) <- gsub("---|-0", "", levels(long$category))
long$main_cluster <- strsplit(as.character(long$category), "-")
long$main_cluster <- sapply(long$main_cluster, function(x) {x[[1]]})
print(long$main_cluster)
class(long$main_cluster)
bp <- ggplot(long, aes(x = category, y = values, fill = main_cluster)) +
geom_boxplot(
width = 0.7
) +
xlab(category_label) +
ylab(value_label)
# bp + coord_flip()
K <- length(unique(dataset[[category_column]]))
if (K > 20) {
bp <- bp + theme(axis.text.x = element_text(size = 6, angle = 90, vjust = 0.5, hjust = 1))
}
bp + scale_fill_manual(values = default_palette)  + theme_bw()
# Prepare df
long <- dataset[, c(category_column, value_column)]
setnames(long, c(category_column, value_column), c("category", "values"))
long$category <- as.character(long$category)
long$category <- factor(long$category,
levels = gsub("---|-0", "", rcs_merged$cluster_code[order(compound_median, compound_mean)]))
long$main_cluster <- strsplit(as.character(long$category), "-")
long$main_cluster <- sapply(long$main_cluster, function(x) {x[[1]]})
print(long$main_cluster)
class(long$main_cluster)
bp <- ggplot(long, aes(x = category, y = values, fill = main_cluster)) +
geom_boxplot(
width = 0.7
) +
xlab(category_label) +
ylab(value_label)
# bp + coord_flip()
K <- length(unique(dataset[[category_column]]))
if (K > 20) {
bp <- bp + theme(axis.text.x = element_text(size = 6, angle = 90, vjust = 0.5, hjust = 1))
}
bp + scale_fill_manual(values = default_palette)  + theme_bw()
# Prepare df
long <- dataset[, c(category_column, value_column)]
setnames(long, c(category_column, value_column), c("category", "values"))
long$category <- as.character(long$category)
View(long)
long$category <- factor(long$category,
levels = gsub("---|-0", "", rcs_merged$cluster_code[order(compound_median, compound_mean)]))
View(long)
lvl <- rcs_merged$cluster_code[order(compound_median, compound_mean)]
lvl <- gsub("---|-0", "", lvl)
long$category <- factor(long$category,
levels = lvl)
View(long)
# Prepare df
long <- dataset[, c(category_column, value_column)]
setnames(long, c(category_column, value_column), c("category", "values"))
long$category <-  gsub("---|-0", "", as.character(long$category))
lvl <- rcs_merged$cluster_code[order(compound_median, compound_mean)]
lvl <- gsub("---|-0", "", lvl)
long$category <- factor(long$category,
levels = lvl)
View(long)
long$main_cluster <- strsplit(as.character(long$category), "-")
long$main_cluster <- sapply(long$main_cluster, function(x) {x[[1]]})
print(long$main_cluster)
class(long$main_cluster)
bp <- ggplot(long, aes(x = category, y = values, fill = main_cluster)) +
geom_boxplot(
width = 0.7
) +
xlab(category_label) +
ylab(value_label)
# bp + coord_flip()
K <- length(unique(dataset[[category_column]]))
if (K > 20) {
bp <- bp + theme(axis.text.x = element_text(size = 6, angle = 90, vjust = 0.5, hjust = 1))
}
bp + scale_fill_manual(values = default_palette)  + theme_bw()
# Prepare df
long <- dataset[, c(category_column, value_column)]
setnames(long, c(category_column, value_column), c("category", "values"))
long$category <-  gsub("---|-0", "", as.character(long$category))
lvl <- rcs_merged$cluster_code[order(compound_median, compound_mean)]
lvl <- gsub("---|-0", "", lvl)
long$category <- factor(long$category,
levels = lvl)
long$main_cluster <- strsplit(as.character(long$category), "-")
long$main_cluster <- sapply(long$main_cluster, function(x) {x[[1]]})
print(long$main_cluster)
class(long$main_cluster)
bp <- ggplot(long, aes(x = category, y = values, fill = main_cluster)) +
geom_boxplot(
width = 0.7
) +
xlab(category_label) +
ylab(value_label)
# bp + coord_flip()
# K <- length(unique(dataset[[category_column]]))
# if (K > 20) {
#   bp <- bp + theme(axis.text.x = element_text(size = 6, angle = 90, vjust = 0.5, hjust = 1))
# }
bp + scale_fill_manual(values = default_palette)  + theme_bw()
# Plot
for (i in numerical_reports) {
plot_boxplots(dataset,
value_column = i,
category_column = "X_C",
value_label = column_labels[i],
category_label = "Clusters")
ggsave(file.path(output_folder_level, subfolder_clusters, glue("fig_clusters_{i}_boxplot.{extension}")))
}
# UTILS
#' param value_column: the dataset column with numerical values to summarize (e.g. PY, Z9, sentiment, score)
#' param category_column: the dataset column with single categorical items (e.g. X_C, SO, PY)
#' param value_label: the label to use in the x axis
#' param category_label: the label to use in the y axis
#' return a ggplot
plot_boxplots <- function(dataset,
value_column,
category_column,
value_label = value_column,
category_label = category_column) {
# Get mean and median for sorting
compound_mean <- tapply(dataset[[value_column]], dataset[[category_column]], mean, na.rm = TRUE)
compound_median <- tapply(dataset[[value_column]], dataset[[category_column]], median, na.rm = TRUE)
# Prepare df
long <- dataset[, c(category_column, value_column)]
setnames(long, c(category_column, value_column), c("category", "values"))
long$category <-  gsub("---|-0", "", as.character(long$category))
lvl <- rcs_merged$cluster_code[order(compound_median, compound_mean)]
lvl <- gsub("---|-0", "", lvl)
long$category <- factor(long$category,
levels = lvl)
long$main_cluster <- strsplit(as.character(long$category), "-")
long$main_cluster <- sapply(long$main_cluster, function(x) {x[[1]]})
bp <- ggplot(long, aes(x = category, y = values, fill = main_cluster)) +
geom_boxplot(
width = 0.7
) +
xlab(category_label) +
ylab(value_label)
# bp + coord_flip()
K <- length(unique(dataset[[category_column]]))
if (K > 20) {
bp <- bp + theme(axis.text.x = element_text(size = 6, angle = 90, vjust = 0.5, hjust = 1))
}
bp + scale_fill_manual(values = default_palette)  + theme_bw()
}
# Plot
for (i in numerical_reports) {
plot_boxplots(dataset,
value_column = i,
category_column = "X_C",
value_label = column_labels[i],
category_label = "Clusters")
ggsave(file.path(output_folder_level, subfolder_clusters, glue("fig_clusters_{i}_boxplot.{extension}")))
}
# 2024/06/06
file.path(output_folder_level, "settings.json")
display_folder <- file.path("C:\\Users\\crist\\Desktop\\GitHub\\display", settings$analysis_metadata$project_folder)
display_folder
dir.create(display_folder)
# Pass the files
## Folder contents
list_of_files <- list.files(index_folder)
# Copy the Quarto document to the GitHub repo `display`
index_folder <- file.path(output_folder_level, "index_files")
index_file <- file.path(output_folder_level, "index.html")
# Pass the files
## Folder contents
list_of_files <- list.files(index_folder)
# Pass the files
## Folder contents
list_of_files <- list.files(index_folder, recursive = TRUE)
# Pass the files
## Folder contents
list_of_files <- list.files(index_folder, recursive = TRUE)
## Index file
file.copy(index_file, display_folder)
file.copy(file.path(index_folder, list_of_files), display_folder)
dir.create(file.path(display_folder, "index_files"))
# Create folder
display_folder <- file.path("C:\\Users\\crist\\Desktop\\GitHub\\display", settings$analysis_metadata$project_folder)
display_project <- file.path(display_folder, "index_files")
# Pass the files
## Folder contents
list_of_files <- list.files(index_folder, recursive = TRUE)
file.copy(file.path(index_folder, list_of_files), display_project)
## Index file
file.copy(index_file, display_folder)
display_project <- file.path(display_folder, "index")
display_project <- file.path(display_folder, "index")
file.copy(file.path(index_folder, list_of_files), display_project)
dir.create(display_project)
file.copy(file.path(index_folder, list_of_files), display_project)
display_project <- file.path(display_folder, "index_files")
file.copy(file.path(index_folder, list_of_files), display_project, recursive = TRUE)
# Pass the files
## Folder contents
list_of_files <- list.files(index_folder, full.names= TRUE, recursive = TRUE)
file.copy(list_of_files, display_project, recursive = TRUE)
dir.create(file.path(display_project, "charts"))
dir.create(file.path(display_project, "libs"))
list_of_files[[1]]
index_folder
# Pass the files
## Folder contents
list_of_files <- list.files(index_folder, full.names= TRUE, recursive = TRUE)
#file.copy(list_of_files, display_project, recursive = TRUE)
for (i in list_of_files) {
display_path <- gsub(index_folder, i)
display_path <- file.path(display_project, i)
file.copy(i, display_path)
}
#file.copy(list_of_files, display_project, recursive = TRUE)
for (i in list_of_files) {
display_path <- gsub(index_folder, '',i)
display_path <- file.path(display_project, i)
file.copy(i, display_path)
}
#file.copy(list_of_files, display_project, recursive = TRUE)
for (i in list_of_files) {
display_path <- gsub(index_folder, '',i)
display_path <- file.path(display_project, i)
print(display_path)
file.copy(i, display_path)
}
?file.copy
# Pass the files
## Folder contents
list_of_files <- list.files(index_folder, full.names= TRUE, recursive = TRUE)
#file.copy(list_of_files, display_project, recursive = TRUE)
for (i in list_of_files) {
display_path <- gsub(index_folder, '',i)
display_path <- file.path(display_project, i)
print(display_path)
file.copy(i, display_path, overwrite = TRUE, recursive = TRUE)
}
index_folder
#file.copy(list_of_files, display_project, recursive = TRUE)
for (i in list_of_files) {
display_path <- gsub(index_folder, '', i)
print(display_path)
display_path <- file.path(display_project, i)
print(display_path)
file.copy(i, display_path, overwrite = TRUE, recursive = TRUE)
}
index_folder
gsub(index_folder, "", list_of_files[[1]])
gsub("C:\\Users\\crist\\OneDrive\\Documentos\\03-bibliometrics/Q293/001/level1/index_files/", "", list_of_files[[1]])
gsub("C\:\\Users\\crist\\OneDrive\\Documentos\\03-bibliometrics/Q293/001/level1/index_files/", "", list_of_files[[1]])
gsub("C:\\\\Users\\\\crist\\\\OneDrive\\\\Documentos\\\\03-bibliometrics\/Q293\/001\/level1\/index_files\/", "", list_of_files[[1]])
gsub("C:\\\\Users\\\\crist\\\\OneDrive\\\\Documentos\\\\03-bibliometrics/Q293/001/level1/index_files/", "", list_of_files[[1]])
#file.copy(list_of_files, display_project, recursive = TRUE)
for (i in list_of_files) {
display_path <- gsub("C:\\\\Users\\\\crist\\\\OneDrive\\\\Documentos\\\\03-bibliometrics/Q293/001/level1/index_files/", '', i)
display_path <- file.path(display_project, i)
print(display_path)
file.copy(i, display_path, overwrite = TRUE, recursive = TRUE)
}
#file.copy(list_of_files, display_project, recursive = TRUE)
for (i in list_of_files) {
display_path <- gsub("C:\\\\Users\\\\crist\\\\OneDrive\\\\Documentos\\\\03-bibliometrics/Q293/001/level1/index_files/", '', i)
display_path <- file.path(display_project, i)
print(display_path)
file.copy(i, display_path, overwrite = TRUE, recursive = TRUE)
}
gsub("C:\\\\Users\\\\crist\\\\OneDrive\\\\Documentos\\\\03-bibliometrics/Q293/001/level1/index_files/", "", list_of_files[[1]])
for (i in list_of_files) {
display_path <- gsub("C:\\\\Users\\\\crist\\\\OneDrive\\\\Documentos\\\\03-bibliometrics/Q293/001/level1/index_files/", '', i)
display_path <- file.path(display_project, i)
print(display_path)
file.copy(i, display_path, overwrite = TRUE, recursive = TRUE)
}
# Pass the files
## Folder contents
list_of_files <- list.files(index_folder, full.names= TRUE, recursive = TRUE)
for (i in list_of_files) {
display_path <- gsub("C:\\\\Users\\\\crist\\\\OneDrive\\\\Documentos\\\\03-bibliometrics/Q293/001/level1/index_files/", '', i)
#display_path <- file.path(display_project, i)
print(display_path)
#file.copy(i, display_path, overwrite = TRUE, recursive = TRUE)
}
display_project
for (i in list_of_files) {
display_path <- gsub("C:\\\\Users\\\\crist\\\\OneDrive\\\\Documentos\\\\03-bibliometrics/Q293/001/level1/index_files/", '', i)
display_path <- file.path(display_project, display_path)
print(display_path)
#file.copy(i, display_path, overwrite = TRUE, recursive = TRUE)
}
for (i in list_of_files) {
display_path <- gsub("C:\\\\Users\\\\crist\\\\OneDrive\\\\Documentos\\\\03-bibliometrics/Q293/001/level1/index_files/", '', i)
display_path <- file.path(display_project, display_path)
print(display_path)
file.copy(i, display_path, overwrite = TRUE, recursive = TRUE)
}
library(fs)
fs::dir_copy(index_folder, display_folder)
file.copy(index_file, display_folder)
?file.create
# Call necessary libraries
library(plyr)
library(Opener5)
library(data.table)
library(dplyr)
library(stringr)
choose.files()
file.choose()
###########################################################################################
# OPTIONS
###########################################################################################
## Query_id
## This has de form Qxxx whith the query number from the query control file
dataset_metadata <- list("query_id" = "Q298",
"fukan_url" = "Not apply. Directly from WOS")
# Open a window to select the directory with the files to merge
paths_to_files = list.files(path = choose.dir(), full.names= TRUE, pattern = "*.txt", recursive = TRUE)
